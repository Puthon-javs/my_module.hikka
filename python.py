from hikkatl.types import Message
from hikkatl.errors import BadRequestError
from hikkapyro import filters
from hikkapyro.types import InlineKeyboardMarkup, InlineKeyboardButton
import io
import ast
import inspect
import re
from typing import Dict, List, Optional, Tuple

from .. import loader, utils


@loader.tds
class ScriptAnalyzerMod(loader.Module):
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Python —Å–∫—Ä–∏–ø—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –æ—à–∏–±–∫–∏, None –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"""

    strings = {
        "name": "ScriptAnalyzer",
        "no_file": "üö´ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–∞–π–ª —Å Python —Å–∫—Ä–∏–ø—Ç–æ–º.",
        "analysis": "üìä <b>–ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–ø—Ç–∞:</b>\n\n{content}",
        "errors": "‚ùå <b>–û—à–∏–±–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞:</b>\n{errors}",
        "none_values": "üîç <b>–ù–∞–π–¥–µ–Ω—ã None –∑–Ω–∞—á–µ–Ω–∏—è:</b>\n{nones}",
        "security": "üõ°Ô∏è <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</b>\n{security}",
        "too_long": "üìú <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ —Ñ–∞–π–ª...</b>",
    }

    async def client_ready(self, client, db):
        self._client = client

    @staticmethod
    def _analyze_script(code: str) -> Dict[str, List[str]]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Python –∫–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫–∏, None –∏ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        result = {"errors": [], "nones": [], "security": []}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        try:
            ast.parse(code)
        except SyntaxError as e:
            result["errors"].append(f"–°—Ç—Ä–æ–∫–∞ {e.lineno}: {e.msg}")
        
        # –ü–æ–∏—Å–∫ None –∑–Ω–∞—á–µ–Ω–∏–π
        try:
            tree = ast.parse(code)
            for node in ast.walk(tree):
                if isinstance(node, ast.Name) and node.id == "None":
                    result["nones"].append(f"–°—Ç—Ä–æ–∫–∞ {node.lineno}: –ù–∞–π–¥–µ–Ω None")
                elif isinstance(node, ast.Constant) and node.value is None:
                    result["nones"].append(f"–°—Ç—Ä–æ–∫–∞ {node.lineno}: –ù–∞–π–¥–µ–Ω None")
        except:
            pass
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        dangerous_patterns = [
            (r"exec\(", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ exec() –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω—ã–º"),
            (r"eval\(", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ eval() –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω—ã–º"),
            (r"__import__\(", "–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ __import__() –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω—ã–º"),
            (r"subprocess\.", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ subprocess –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω—ã–º"),
            (r"os\.system\(", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ os.system() –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω—ã–º"),
            (r"pickle\.loads\(", "–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è pickle –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω–æ–π"),
            (r"open\(", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ open() –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É—Ç–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω—ã–º"),
            (r"\.write\(", "–û–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –º–æ–≥—É—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω—ã–º–∏"),
        ]
        
        for pattern, warning in dangerous_patterns:
            if re.search(pattern, code):
                result["security"].append(warning)
        
        return result

    async def _send_long_text(self, message: Message, text: str, filename: str = "analysis.txt"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ —Ñ–∞–π–ª"""
        file = io.BytesIO(text.encode("utf-8"))
        file.name = filename
        await message.reply(file=file)
        return

    @loader.unrestricted
    async def sazcmd(self, message: Message):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Python —Å–∫—Ä–∏–ø—Ç - –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–∞–π–ª —Å –∫–æ–º–∞–Ω–¥–æ–π .saz"""
        reply = await message.get_reply_message()
        if not reply or not reply.file:
            await utils.answer(message, self.strings["no_file"])
            return

        try:
            file = await reply.download_media(bytes)
            code = file.decode("utf-8")
        except UnicodeDecodeError:
            await utils.answer(message, "‚ùå –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º Python —Å–∫—Ä–∏–ø—Ç–æ–º")
            return
        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            return

        # –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–ø—Ç–∞
        analysis = self._analyze_script(code)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        parts = []
        
        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫—Ä–∏–ø—Ç–∞
        content_msg = f"<code>{utils.escape_html(code[:2000])}</code>"
        if len(code) > 2000:
            content_msg += "\n\n..." + self.strings["too_long"]
            parts.append(self.strings["analysis"].format(content=content_msg))
            await utils.answer(message, "\n\n".join(parts))
            await self._send_long_text(message, code, "script.py")
        else:
            parts.append(self.strings["analysis"].format(content=content_msg))
        
        # –û—à–∏–±–∫–∏
        if analysis["errors"]:
            errors = "\n".join(f"‚Ä¢ {e}" for e in analysis["errors"])
            parts.append(self.strings["errors"].format(errors=errors))
        else:
            parts.append("‚úÖ <b>–û—à–∏–±–æ–∫ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>")
        
        # None –∑–Ω–∞—á–µ–Ω–∏—è
        if analysis["nones"]:
            nones = "\n".join(f"‚Ä¢ {n}" for n in analysis["nones"])
            parts.append(self.strings["none_values"].format(nones=nones))
        else:
            parts.append("‚úÖ <b>None –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>")
        
        # –ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if analysis["security"]:
            security = "\n".join(f"‚Ä¢ {s}" for s in analysis["security"])
            parts.append(self.strings["security"].format(security=security))
        else:
            parts.append("‚úÖ <b>–û–ø–∞—Å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        full_message = "\n\n".join(parts)
        if len(full_message) > 4096:
            await utils.answer(message, self.strings["too_long"])
            await self._send_long_text(message, full_message)
        else:
            await utils.answer(message, full_message)