from hikkatl.types import Message
from .. import loader, utils
import time

@loader.tds
class MediaGuardMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –º–µ–¥–∏–∞ –æ—Ç –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    strings = {
        "name": "MediaGuard",
        "cfg_enabled": "–í–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É –º–µ–¥–∏–∞",
        "cfg_whitelist": "–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ (ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
        "cfg_ban_types": "–¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (photo,video,gif,document)",
        "cfg_log_chat": "ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤ (0 = –æ—Ç–∫–ª—é—á–µ–Ω–æ)",
        "media_deleted": "üö´ <b>–ú–µ–¥–∏–∞ —É–¥–∞–ª–µ–Ω–æ!</b>\n<b>–ß–∞—Ç:</b> <code>{}</code>\n<b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> <code>{}</code>",
        "whitelist_added": "‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:</b> <code>{}</code>",
        "whitelist_removed": "üóë <b>–£–¥–∞–ª—ë–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞:</b> <code>{}</code>",
        "status": "üîí <b>MediaGuard {}</b>\n<b>–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:</b> {}\n<b>–õ–æ–≥–∏:</b> {}",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "enabled",
                True,
                lambda: self.strings["cfg_enabled"],
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "whitelist",
                "",
                lambda: self.strings["cfg_whitelist"],
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "ban_types",
                "photo,video,document",
                lambda: self.strings["cfg_ban_types"],
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "log_chat",
                0,
                lambda: self.strings["cfg_log_chat"],
                validator=loader.validators.TelegramID()
            ),
        )

    async def client_ready(self, client, db):
        self.client = client

    async def watcher(self, message: Message):
        if not self.config["enabled"]:
            return

        chat_id = utils.get_chat_id(message)
        user_id = message.sender_id
        whitelist = set(map(int, self.config["whitelist"].split(","))) if self.config["whitelist"] else set()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–∞–≤–∞
        if user_id in whitelist or await self.check_admin(chat_id):
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –º–µ–¥–∏–∞
        media_type = self.get_media_type(message)
        if media_type and media_type in self.config["ban_types"].split(","):
            await message.delete()
            log_msg = self.strings["media_deleted"].format(chat_id, user_id)
            await self.log_action(log_msg)

    async def check_admin(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –±–æ—Ç–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –≤ —á–∞—Ç–µ"""
        try:
            chat = await self.client.get_entity(chat_id)
            return chat.admin_rights is not None
        except:
            return False

    def get_media_type(self, message: Message) -> str | None:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        if message.photo:
            return "photo"
        elif message.video:
            return "video"
        elif message.gif:
            return "gif"
        elif message.document:
            return "document"
        return None

    async def log_action(self, text: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç"""
        if self.config["log_chat"]:
            await self.client.send_message(
                self.config["log_chat"],
                text
            )

    @loader.command(alias="mgstatus")
    async def mediaguardstatuscmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã"""
        status = "–í–ö–õ" if self.config["enabled"] else "–í–´–ö–õ"
        whitelist = self.config["whitelist"] or "–Ω–µ—Ç"
        logs = "–í–ö–õ" if self.config["log_chat"] else "–í–´–ö–õ"

        await utils.answer(
            message,
            self.strings["status"].format(status, whitelist, logs)
        )

    @loader.command(alias="mgwl")
    async def mediaguardwlcmd(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        args = utils.get_args_raw(message)
        if not args or not args.isdigit():
            await utils.answer(message, "‚ùå <b>–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>")
            return

        user_id = int(args)
        whitelist = set(map(int, self.config["whitelist"].split(","))) if self.config["whitelist"] else set()

        if user_id in whitelist:
            whitelist.remove(user_id)
            msg = self.strings["whitelist_removed"].format(user_id)
        else:
            whitelist.add(user_id)
            msg = self.strings["whitelist_added"].format(user_id)

        self.config["whitelist"] = ",".join(map(str, whitelist))
        await utils.answer(message, msg)