#meta developer: @Python_Javs
from hikka import loader, utils
from telethon.tl.types import Message
import requests
import random
import asyncio
from datetime import datetime

@loader.tds
class UltimateAnimeMod(loader.Module):
    """üî• Ultimate –∞–Ω–∏–º–µ-–º–æ–¥—É–ª—å —Å API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    strings = {
        "name": "AnimeUltimate",
        "loading": "<b>üåÄ –ó–∞–≥—Ä—É–∂–∞—é –∞–Ω–∏–º–µ-–¥–∞–Ω–Ω—ã–µ...</b>",
        "error": "<b>üí¢ –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</b>",
        "no_args": "<b>üîç –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: .anime –ù–∞—Ä—É—Ç–æ)</b>",
    }

    async def client_ready(self, client, db):
        self._client = client
        self.db = db
        self.jikan_url = "https://api.jikan.moe/v4"
        self.waifu_pics = "https://api.waifu.pics"

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    @loader.command()
    async def anime(self, message: Message):
        """–ù–∞–π—Ç–∏ –∞–Ω–∏–º–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["no_args"])
            return
        
        await utils.answer(message, self.strings["loading"])
        
        try:
            data = await self._get_anime_data(args)
            if not data:
                await utils.answer(message, f"{self.strings['error']}: –ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            text = (
                f"üé¨ <b>{data['title']}</b>\n\n"
                f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {data['score']}/10\n"
                f"üìÖ <b>–ì–æ–¥:</b> {data['year']}\n"
                f"üì∫ <b>–≠–ø–∏–∑–æ–¥—ã:</b> {data['episodes']}\n"
                f"üåÄ <b>–°—Ç–∞—Ç—É—Å:</b> {data['status']}\n\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{data['synopsis'][:300]}..."
            )
            
            if data['image_url']:
                await self._client.send_file(
                    message.peer_id,
                    data['image_url'],
                    caption=text,
                    reply_to=message.id
                )
            else:
                await utils.answer(message, text)
                
        except Exception as e:
            await utils.answer(message, f"{self.strings['error']}\n<code>{e}</code>")

    @loader.command()
    async def waifu(self, message: Message):
        """–°–ª—É—á–∞–π–Ω–∞—è –≤–∞–π—Ñ—É (NSFW/SFW)"""
        await utils.answer(message, self.strings["loading"])
        try:
            category = random.choice(["sfw", "nsfw"])
            types = ["waifu", "neko", "awoo"] if category == "sfw" else ["waifu", "neko"]
            img_url = requests.post(
                f"{self.waifu_pics}/many/{category}/{random.choice(types)}",
                json={"exclude": []}
            ).json()["files"][0]
            
            await self._client.send_file(
                message.peer_id,
                img_url,
                caption=f"üíñ <b>–í–∞—à–∞ –≤–∞–π—Ñ—É</b> ({category.upper()})",
                reply_to=message.id
            )
        except Exception as e:
            await utils.answer(message, f"{self.strings['error']}\n<code>{e}</code>")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    @loader.command()
    async def animerel(self, message: Message):
        """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ—Ç–Ω–æ—à–µ–Ω–∏–π"""
        args = utils.get_args_raw(message)
        name = args if args else "–¢—ã"
        score = random.randint(30, 100)
        
        result = (
            f"üíû <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ—Ç–Ω–æ—à–µ–Ω–∏–π:</b>\n\n"
            f"‚ù§ {name} –∏ {random.choice(['–°–∞–∫—É—Ä–∞', '–ó–µ—Ä–æ –¢—É', '–†–µ–º', '–ú–∏–∫—É'])} - {score}%\n"
            f"üî• –•–∏–º–∏—è: {random.randint(50, 100)}%\n"
            f"üíç –®–∞–Ω—Å –±—Ä–∞–∫–∞: {random.randint(10, 80)}%\n\n"
            f"üìå <i>–°–æ–≤–µ—Ç:</i> {random.choice(['–î–∞—Ä–∏—Ç–µ –±–æ–ª—å—à–µ –ø–æ–¥–∞—Ä–∫–æ–≤!', '–°–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∏–º–µ —Å–±–ª–∏–∂–∞–µ—Ç!'])}"
        )
        await utils.answer(message, result)

    @loader.command()
    async def animegen(self, message: Message):
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∂–∞–Ω—Ä—É"""
        genres = ["–°—ë–Ω–µ–Ω", "–†–æ–º–∞–Ω—Ç–∏–∫–∞", "–§—ç–Ω—Ç–µ–∑–∏", "–ú–µ—Ö–∞", "–•–æ—Ä—Ä–æ—Ä"]
        chosen = random.choice(genres)
        
        recs = {
            "–°—ë–Ω–µ–Ω": ["Attack on Titan", "Naruto", "One Piece"],
            "–†–æ–º–∞–Ω—Ç–∏–∫–∞": ["Your Lie in April", "Toradora!", "Clannad"],
            "–§—ç–Ω—Ç–µ–∑–∏": ["Re:Zero", "Sword Art Online", "No Game No Life"],
            "–ú–µ—Ö–∞": ["Code Geass", "Gundam", "Neon Genesis Evangelion"],
            "–•–æ—Ä—Ä–æ—Ä": ["Another", "Higurashi", "Tokyo Ghoul"]
        }
        
        text = (
            f"üéå <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({chosen}):</b>\n\n"
            f"1. {recs[chosen][0]}\n"
            f"2. {recs[chosen][1]}\n"
            f"3. {recs[chosen][2]}\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π <code>.anime –ù–∞–∑–≤–∞–Ω–∏–µ</code> –¥–ª—è –ø–æ–∏—Å–∫–∞"
        )
        await utils.answer(message, text)

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async def _get_anime_data(self, query: str):
        try:
            response = requests.get(f"{self.jikan_url}/anime?q={query}&limit=1").json()
            if not response.get("data"):
                return None
                
            data = response["data"][0]
            return {
                "title": data["title"],
                "score": data["score"] if data["score"] else "N/A",
                "year": data["year"] if data["year"] else "N/A",
                "episodes": data["episodes"] if data["episodes"] else "N/A",
                "status": data["status"],
                "synopsis": data["synopsis"] if data["synopsis"] else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è",
                "image_url": data["images"]["jpg"]["image_url"]
            }
        except:
            return None