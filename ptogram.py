#meta developer: @Python_Javs
from hikka import loader, utils
from telethon.tl.types import Message
import random
import json
import os
from typing import Dict

@loader.tds
class ProgHelperMod(loader.Module):
    """üíª –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
    strings = {
        "name": "ProgHelper",
        "config_done": "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
        "anon_warning": "‚ö† –í—ã –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —Ä–µ–∂–∏–º–µ!",
        "no_code": "üìù –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥/–≤–æ–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        "lang_list": "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: Python, JS, C++, Java, Go, Rust, TS",
        "db_error": "üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "gender",
                "anon",
                "–í–∞—à –ø–æ–ª (male/female/anon)",
                validator=loader.validators.Choice(["male", "female", "anon"])
            ),
            loader.ConfigValue(
                "lang",
                "Python",
                "–û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                validator=loader.validators.Choice(
                    ["Python", "JavaScript", "C++", "Java", "Go", "Rust", "TypeScript"]
                )
            )
        )
        self.db_path = os.path.join(utils.get_base_dir(), "proghelper_db_v2.json")
        self._init_secure_db()

    def _init_secure_db(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
        default_db = {
            "quotes": {
                "male": ["–ö–æ–¥ ‚Äî —ç—Ç–æ –ø–æ—ç–∑–∏—è!", "–û—à–∏–±–∫–∏ ‚Äî –ø—É—Ç—å –∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É"],
                "female": ["–¢—ã ‚Äî –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∫–∞ –º–µ—á—Ç—ã!", "–ü–∏—à–∏ –∫–æ–¥ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é"],
                "anon": ["while True: learn()", "// TODO: –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥"]
            },
            "snippets": {},
            "errors": {}
        }
        
        try:
            if os.path.exists(self.db_path):
                with open(self.db_path, "r") as f:
                    self.db = json.load(f)
                
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
                if "quotes" not in self.db:
                    self.db["quotes"] = default_db["quotes"]
                    self._save_db()
                    return True
            else:
                self.db = default_db
                self._save_db()
        except Exception:
            self.db = default_db
            self._save_db()
            return False

    def _save_db(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ë–î"""
        try:
            with open(self.db_path, "w") as f:
                json.dump(self.db, f, ensure_ascii=False, indent=2)
        except Exception:
            pass

    async def client_ready(self, client, db):
        self._client = client
        self._db = db

    @loader.command()
    async def pcode(self, message: Message):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞"""
        code = utils.get_args_raw(message)
        if not code:
            await utils.answer(message, self.strings["no_code"])
            return

        try:
            gender = self.config["gender"]
            quotes = self.db["quotes"].get(gender, self.db["quotes"]["anon"])
            
            analysis = (
                f"{'üë®‚Äçüíª' if gender == 'male' else 'üë©‚Äçüíª'} –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞:\n\n"
                f"üîç –û—à–∏–±–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {random.randint(0, 3)}\n"
                f"‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {random.choice(['–≤–æ–∑–º–æ–∂–Ω—ã', '–Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è'])}\n"
                f"üí° –°–æ–≤–µ—Ç: {random.choice(quotes)}"
            )
            await utils.answer(message, analysis)
        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

    @loader.command()
    async def pset(self, message: Message):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è"""
        args = utils.get_args_raw(message)
        if not args:
            current = (
                f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                f"üë§ –ü–æ–ª: {self.config['gender']}\n"
                f"üíª –Ø–∑—ã–∫: {self.config['lang']}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .pset [–ø–∞—Ä–∞–º–µ—Ç—Ä] [–∑–Ω–∞—á–µ–Ω–∏–µ]\n"
                f"–ü—Ä–∏–º–µ—Ä: .pset lang JavaScript"
            )
            await utils.answer(message, current)
            return

        try:
            params = args.split(maxsplit=1)
            if len(params) != 2:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            
            key, value = params
            if key in self.config:
                self.config[key] = value.lower() if key == "gender" else value.capitalize()
                await utils.answer(message, self.strings["config_done"])
            else:
                await utils.answer(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä")
        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    @loader.command()
    async def plang(self, message: Message):
        """–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤"""
        await utils.answer(message, self.strings["lang_list"])

    @loader.command()
    async def pfix(self, message: Message):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self._init_secure_db()
        await utils.answer(message, self.strings["db_error"])