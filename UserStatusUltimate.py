from hikkatl.types import Message, User
from hikkatl.utils import get_display_name
from hikkatl.tl.functions.channels import EditBannedRequest
from hikkatl.tl.functions.photos import UploadProfilePhotoRequest
from hikkatl.tl.types import ChatBannedRights
from datetime import datetime, timedelta
import requests
from io import BytesIO
from .. import loader, utils

@loader.tds
class UserStatusUltimateMod(loader.Module):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏ –±–∞–Ω–Ω–µ—Ä–∞–º–∏"""

    strings = {
        "name": "UserStatusUltimate",
        "status_set": "‚úÖ <b>–°—Ç–∞—Ç—É—Å {} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {}</b>",
        "no_reply": "üö´ <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>",
        "banned": "‚õî <b>{} –ø–æ–ª—É—á–∏–ª –±–∞–Ω –Ω–∞ 1 –¥–µ–Ω—å!</b>",
        "muted": "üîá <b>{} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç!</b>",
        "kicked": "üë¢ <b>{} –±—ã–ª –∫–∏–∫–Ω—É—Ç!</b>",
        "no_rights": "üö´ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!</b>",
        "banner_set": "üñº <b>–ë–∞–Ω–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!</b>",
        "banner_fail": "üö´ <b>–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–Ω–Ω–µ—Ä</b>",
        "config_banner": "üåÖ <b>URL –±–∞–Ω–Ω–µ—Ä–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!</b>",
        "profile": (
            "üñº <b>–ë–∞–Ω–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è:</b>\n\n"
            "üóì <b>–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"
            "üÜî <b>ID:</b> <code>{}</code>\n"
            "üë§ <b>–ò–º—è:</b> {}\n"
            "üìõ <b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> {}\n"
            "‚≠ê <b>–°—Ç–∞—Ç—É—Å:</b> {}\n"
            "ü§ñ <b>–ë–æ—Ç:</b> {}\n"
            "‚úÖ <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {}\n"
            "üö´ <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b> {}"
        )
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "banner_url",
                "https://i.imgur.com/xNQhfLZ.jpeg",
                "URL –±–∞–Ω–Ω–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è",
                validator=loader.validators.Link()
            )
        )
        self.statuses = {
            "standard": "Standard VIP",
            "vip": "VIP",
            "gold": "Gold VIP",
            "platinum": "Platinum VIP",
            "admin": "Administrator"
        }
        self.users_status = {}

    async def client_ready(self, client, db):
        self._client = client

    @loader.command()
    async def setbanner(self, message: Message):
        """- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–Ω–Ω–µ—Ä –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            response = requests.get(self.config["banner_url"])
            if response.status_code != 200:
                raise Exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ decode
            file = BytesIO(response.content)
            file.name = "banner.jpg"
            
            # –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ decode
            uploaded = await self._client.upload_file(file)
            await self._client(UploadProfilePhotoRequest(
                file=uploaded,
                video_emoji_markup=None
            ))
            await utils.answer(message, self.strings["banner_set"])
        except Exception as e:
            await utils.answer(
                message,
                f"{self.strings['banner_fail']}\n"
                f"<b>–û—à–∏–±–∫–∞:</b> <code>{str(e)}</code>\n"
                f"<b>–¢–µ–∫—É—â–∏–π URL:</b> <code>{self.config['banner_url']}</code>"
            )

    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
    @loader.command()
    async def profile(self, message: Message):
        """(reply) - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
        reply = await message.get_reply_message()
        user = message.sender_id if not reply else reply.sender_id

        entity = await self._client.get_entity(user)
        
        await utils.answer(
            message,
            self.strings["profile"].format(
                user,
                get_display_name(entity),
                f"@{entity.username}" if entity.username else "–ù–µ—Ç",
                self.users_status.get(user, "–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞"),
                "–î–∞" if getattr(entity, "bot", False) else "–ù–µ—Ç",
                "–î–∞" if getattr(entity, "verified", False) else "–ù–µ—Ç",
                "–î–∞" if getattr(entity, "restricted", False) else "–ù–µ—Ç"
            )
        )

    @loader.command()
    async def ban(self, message: Message):
        """(reply) - –ó–∞–±–∞–Ω–∏—Ç—å –Ω–∞ 1 –¥–µ–Ω—å"""
        await self._mod_action(message, "banned", timedelta(days=1), view_messages=True)

    @loader.command()
    async def mute(self, message: Message):
        """(reply) - –ó–∞–º—É—Ç–∏—Ç—å –Ω–∞ 5 –º–∏–Ω—É—Ç"""
        await self._mod_action(message, "muted", timedelta(minutes=5), send_messages=True)

    @loader.command()
    async def kick(self, message: Message):
        """(reply) - –ö–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        reply = await message.get_reply_message()
        if not reply:
            await utils.answer(message, self.strings["no_reply"])
            return

        try:
            await self._client.kick_participant(message.chat_id, reply.sender_id)
            await utils.answer(
                message,
                self.strings["kicked"].format(
                    get_display_name(await self._client.get_entity(reply.sender_id))
                )
            )
        except:
            await utils.answer(message, self.strings["no_rights"])

    @loader.command()
    async def setstatus(self, message: Message):
        """<—Å—Ç–∞—Ç—É—Å> (reply) - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"""
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()

        if not reply or not args or args.lower() not in self.statuses:
            await utils.answer(message, self.strings["no_reply"])
            return

        user = reply.sender_id
        self.users_status[user] = self.statuses[args.lower()]

        await utils.answer(
            message,
            self.strings["status_set"].format(
                self.statuses[args.lower()],
                get_display_name(await self._client.get_entity(user))
            )
        )

    @loader.command()
    async def stat(self, message: Message):
        """(reply) - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        reply = await message.get_reply_message()
        user = message.sender_id if not reply else reply.sender_id

        entity = await self._client.get_entity(user)
        status = self.users_status.get(user, "–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞")

        text = (
            "üìä <b>{} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            "üë§ <b>–ò–º—è:</b> {}\n"
            "üÜî <b>ID:</b> {}\n"
            "‚≠ê <b>–°—Ç–∞—Ç—É—Å:</b> {}\n"
            "üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {}"
        ).format(
            "–¢–≤–æ—è" if user == message.sender_id else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            get_display_name(entity),
            user,
            status,
            entity.date.strftime("%d.%m.%Y") if hasattr(entity, "date") else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        )

        await utils.answer(message, text)

    async def _mod_action(self, message, action, delta, **kwargs):
        reply = await message.get_reply_message()
        if not reply:
            await utils.answer(message, self.strings["no_reply"])
            return

        try:
            await self._client(
                EditBannedRequest(
                    message.chat_id,
                    reply.sender_id,
                    ChatBannedRights(
                        until_date=datetime.now() + delta,
                        **kwargs
                    )
                )
            )
            await utils.answer(
                message,
                self.strings[action].format(
                    get_display_name(await self._client.get_entity(reply.sender_id))
                )
            )
        except:
            await utils.answer(message, self.strings["no_rights"])