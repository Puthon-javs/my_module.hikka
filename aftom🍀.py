from hikkatl.types import Message
from .. import loader, utils
import asyncio

@loader.tds
class SmartReplierMod(loader.Module):
    """–£–º–Ω—ã–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    strings = {
        "name": "SmartReplier",
        "reply_added": "‚úÖ <b>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n<b>–¢—Ä–∏–≥–≥–µ—Ä:</b> <code>{}</code>\n<b>–û—Ç–≤–µ—Ç:</b> <code>{}</code>",
        "reply_removed": "üóë <b>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç —É–¥–∞–ª—ë–Ω!</b> (ID: <code>{}</code>)",
        "no_replies": "üì≠ <b>–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤.</b>",
        "replies_list": "üìã <b>–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤:</b>\n\n{}",
        "not_found": "üîç <b>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>",
        "args_error": "‚ùå <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b> <code>.addreply —Ç—Ä–∏–≥–≥–µ—Ä | –æ—Ç–≤–µ—Ç</code>",
        "ignore_added": "‚ûñ <b>–ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç!</b> (ID: <code>{}</code>)",
        "ignore_removed": "‚ûï <b>–ß–∞—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–∞!</b> (ID: <code>{}</code>)",
    }

    def __init__(self):
        self.replies = {}
        self.ignore_list = set()

    async def client_ready(self, client, db):
        self.client = client

    async def watcher(self, message: Message):
        if not self.replies or utils.get_chat_id(message) in self.ignore_list:
            return

        text = message.raw_text.lower() if message.raw_text else ""
        for trigger, reply in self.replies.items():
            if trigger.lower() in text:
                await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ñ–ª—É–¥–∞
                await utils.answer(message, reply)
                break

    @loader.command(alias="addreply")
    async def addreplycmd(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç. –ü—Ä–∏–º–µ—Ä: .addreply –ø—Ä–∏–≤–µ—Ç | Hello!"""
        args = utils.get_args_raw(message)
        if not args or "|" not in args:
            await utils.answer(message, self.strings["args_error"])
            return

        trigger, reply = args.split("|", 1)
        trigger = trigger.strip()
        reply = reply.strip()

        self.replies[trigger] = reply
        await utils.answer(
            message,
            self.strings["reply_added"].format(trigger, reply)
        )

    @loader.command(alias="delreply")
    async def delreplycmd(self, message: Message):
        """–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç. –ü—Ä–∏–º–µ—Ä: .delreply –ø—Ä–∏–≤–µ—Ç"""
        args = utils.get_args_raw(message)
        if not args or args not in self.replies:
            await utils.answer(message, self.strings["not_found"])
            return

        del self.replies[args]
        await utils.answer(
            message,
            self.strings["reply_removed"].format(args)
        )

    @loader.command(alias="listreplies")
    async def listrepliescmd(self, message: Message):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤"""
        if not self.replies:
            await utils.answer(message, self.strings["no_replies"])
            return

        replies_list = "\n".join(
            f"‚ñ™ <code>{trigger}</code> ‚Üí <code>{reply}</code>"
            for trigger, reply in self.replies.items()
        )
        await utils.answer(
            message,
            self.strings["replies_list"].format(replies_list)
        )

    @loader.command(alias="ignorechat")
    async def ignorechatcmd(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–∞"""
        chat_id = utils.get_chat_id(message)
        if chat_id in self.ignore_list:
            self.ignore_list.remove(chat_id)
            msg = self.strings["ignore_removed"].format(chat_id)
        else:
            self.ignore_list.add(chat_id)
            msg = self.strings["ignore_added"].format(chat_id)

        await utils.answer(message, msg)