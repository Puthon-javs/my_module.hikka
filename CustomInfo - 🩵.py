from .. import loader, utils
import git
import platform
import psutil
import time
import os
from telethon.tl.types import MessageEntityUrl
import re

__version__ = (3, 0, 0)
# meta developer: @Python_Javs

@loader.tds
class CustomInfoMod(loader.Module):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–±–æ—Ç–µ - ping, –∏ —Ç.–¥."""

    strings = {
        "name": "Info ‚õµ", 
        "update_available": "<b>–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!</b>",
        "latest_version": "<b>–£ –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è.</b>",
        "old_format_warning": "<b>üá¶üá≤ –¢–µ–≥ {system_info} —É—Å—Ç–∞—Ä–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n\n{ram_using} - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è RAM\n{ram_total} - –≤—Å–µ–≥–æ RAM\n{rom_using} - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –ø–∞–º—è—Ç—å\n{rom_total} - –≤—Å–µ–≥–æ –ø–∞–º—è—Ç–∏</b>",
        "custom_format": (
            "<blockquote>ü©∑ Owner:users</blockquote>\n\n"
            "<blockquote>ü©∑ Version: 6.8.9\n"
            "ü©∑ Branch: {branch}\n"
            "ü©∑ Prefix: ¬´-¬ª</blockquote>\n\n"
            "<blockquote>ü©∑ Uptime: {uptime}\n"
            "ü©∑ CPU: {cpu_usage}%\n"
            "ü©∑ RAM: {ram_used} MB</blockquote>\n\n"
            "<blockquote>ü©∑ My modules: @Python_Javs\n"
            "ü©∑ Official developer</blockquote>"
        )
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            "custom_info_text",
            "<emoji document_id=5219899949281453881>üõ†</emoji> <b>-[-INFORMATION-]-</b>\n\n"
            "<emoji document_id=5247213725080890199>‚öú</emoji><b> Owner:</b> <b>{owner}</b>\n\n"
            "<emoji document_id=5219943216781995020>üö∏</emoji> <b>Version:</b> <b>{version}</b>\n"
            "<emoji document_id=5222108309795908493>üå±</emoji><b>Branch:</b> <b>{branch}</b>\n"
            "<emoji document_id=5222148368955877900>ü¶ã</emoji> <b>{update_status}</b>\n\n"
            "<emoji document_id=5453900977432188793>ü¶Ö</emoji> <b>Ping:</b> <b>{ping}</b> <b>–º—Å</b>\n"
            "<emoji document_id=5258113901106580375>üëë</emoji> <b>–ê–ø—Ç–∞–π–º:</b> <b>{uptime}</b>\n"
            "<emoji document_id=5258466217273871977>üßë‚Äçüíª</emoji> <b>–ü—Ä–µ—Ñ–∏–∫—Å:</b> ¬´<b>{prefix}</b>¬ª\n\n"
            "<emoji document_id=5873146865637133757>üåä</emoji> <b>RAM —Å–µ—Ä–≤–µ—Ä–∞:</b> <code>{ram_using} GB | {ram_total} GB</code>\n"
            "<emoji document_id=5870982283724328568>üëæ</emoji> <b>–ü–∞–º—è—Ç—å:</b> <code>{rom_using} GB | {rom_total} GB</code>\n\n"
            "<emoji document_id=5391034312759980875>üï∑</emoji><b> OC: {os_name} {os_version}</b>\n"
            "<emoji document_id=5235588635885054955>üêæ</emoji> <b>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:</b> <b>{cpu_info}</b>",
            lambda: "–®–∞–±–ª–æ–Ω –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            
            "banner_url",
            "https://i.imgur.com/eLZMivm.jpeg",
            lambda: "URL –±–∞–Ω–Ω–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (None —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å)",
            
            "use_custom_format",
            False,
            lambda: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞"
        )

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self._client = client

    def get_cpu_info(self):
        try:
            with open("/proc/cpuinfo", "r") as f:
                for line in f:
                    if "model name" in line:
                        return line.split(":")[1].strip()
        except:
            return platform.processor() or "Unknown"

    def get_cpu_usage(self):
        try:
            return psutil.cpu_percent(interval=1)
        except:
            return 0.0

    def get_ram_info(self):
        try:
            ram = psutil.virtual_memory()
            total = round(ram.total / (1024**3), 2)
            used = round(ram.used / (1024**3), 2)
            return used, total
        except:
            return 0, 0

    def get_ram_usage_mb(self):
        try:
            ram = psutil.virtual_memory()
            return round(ram.used / (1024**2), 1)
        except:
            return 0

    def get_disk_info(self):
        try:
            disk = psutil.disk_usage('/')
            total = round(disk.total / (1024**3), 2)
            used = round(disk.used / (1024**3), 2)
            return used, total
        except:
            return 0, 0
            
    @loader.command()
    async def pinfo(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–∑–µ—Ä–±–æ—Ç–µ"""
        try:
            repo = git.Repo(search_parent_directories=True)
            branch = repo.active_branch.name
            diff = repo.git.log([f"HEAD..origin/{branch}", "--oneline"])
            update_status = self.strings["update_available"] if diff else self.strings["latest_version"]
        except:
            branch = "unknown"
            update_status = "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
            
        start = time.perf_counter_ns()
        msg = await message.client.send_message("me", 'üíú')
        ping = round((time.perf_counter_ns() - start) / 10**6, 3)
        await msg.delete()

        ram_used, ram_total = self.get_ram_info()
        ram_used_mb = self.get_ram_usage_mb()
        disk_used, disk_total = self.get_disk_info()
        cpu_usage = self.get_cpu_usage()

        if self.config["use_custom_format"]:
            template = self.strings["custom_format"]
            format_dict = {
                "branch": branch,
                "uptime": utils.formatted_uptime(),
                "cpu_usage": cpu_usage,
                "ram_used": ram_used_mb
            }
        else:
            template = self.config["custom_info_text"]
            format_dict = {
                "owner": self._client.hikka_me.first_name + ' ' + (self._client.hikka_me.last_name or ''),
                "version": '3.0.0',
                "branch": branch,
                "update_status": update_status,
                "prefix": self.get_prefix(),
                "ping": ping,
                "uptime": utils.formatted_uptime(),
                "ram_using": ram_used,
                "ram_total": ram_total,
                "rom_using": disk_used,
                "rom_total": disk_total,
                "os_name": platform.system(),
                "os_version": platform.release(),
                "cpu_info": self.get_cpu_info()
            }

            if "{system_info}" in template:
                format_dict["system_info"] = self.strings["old_format_warning"]

        info = template.format(**format_dict)
        
        reply_to = await message.get_reply_message()
        thread = getattr(message, 'message_thread_id', None)

        if self.config["banner_url"]:
            await self.client.send_file(
                message.peer_id,
                self.config["banner_url"],
                caption=info,
                reply_to=reply_to.id if reply_to else None,
                message_thread_id=thread
            )
            if message.out:
                await message.delete()
        else:
            await utils.answer(
                message,
                info
            )

    @loader.command()
    async def setcinfo(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: .setcinfo <—Ç–µ–∫—Å—Ç>"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "<emoji document_id=5314413943035278948>üîã</emoji><b> –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!")
            return

        self.config["custom_info_text"] = args
        await utils.answer(message, "<emoji document_id=5314413943035278948>üîã</emoji><b> CustomInfo - —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω.</b>")

    @loader.command()
    async def togglectm(self, message):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–µ–∂–¥—É –∫–∞—Å—Ç–æ–º–Ω—ã–º –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º"""
        self.config["use_custom_format"] = not self.config["use_custom_format"]
        status = "–≤–∫–ª—é—á–µ–Ω" if self.config["use_custom_format"] else "–≤—ã–∫–ª—é—á–µ–Ω"
        await utils.answer(message, f"<emoji document_id=5332533929020761310>‚úÖ</emoji> <b>–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç {status}</b>")