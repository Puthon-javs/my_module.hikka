
#meta developer: @Python_Javs

from .. import loader, utils
import random
import string
import secrets
from typing import Optional

@loader.tds
class PasswordGeneratorMod(loader.Module):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–≤–µ—Ä—Ö—Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""

    strings = {
        "name": "PasswordGen",
        "cfg_demo": "–î–µ–º–æ-—Ä–µ–∂–∏–º (–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã)",
        "cfg_min_len": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è",
        "cfg_max_len": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è",
        "cfg_use_special": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã",
        "cfg_use_emoji": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å emoji",
        "cfg_avoid_similar": "–ò–∑–±–µ–≥–∞—Ç—å –ø–æ—Ö–æ–∂–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤",
        "generated": "<b>üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:</b> <code>{password}</code>\n"
                    "<b>üìä –î–ª–∏–Ω–∞:</b> {length}\n"
                    "<b>üí™ –°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {strength}",
        "no_args": "<b>‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ </b><code>.pgen default</code>",
        "presets": "<b>üéõ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã:</b>\n"
                  "<code>default</code> - 12 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã+—Ü–∏—Ñ—Ä—ã+—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã\n"
                  "<code>strong</code> - 16 —Å–∏–º–≤–æ–ª–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é\n"
                  "<code>pin</code> - 6 —Ü–∏—Ñ—Ä\n"
                  "<code>memorable</code> - 8 —Å–ª–æ–≤ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏\n"
                  "<code>emoji</code> - –ø–∞—Ä–æ–ª—å –∏–∑ emoji\n"
                  "<code>custom</code> - —Å –≤–∞—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "demo_mode",
                True,
                lambda: self.strings["cfg_demo"],
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "min_length",
                8,
                lambda: self.strings["cfg_min_len"],
                validator=loader.validators.Integer(minimum=4, maximum=100)
            ),
            loader.ConfigValue(
                "max_length",
                24,
                lambda: self.strings["cfg_max_len"],
                validator=loader.validators.Integer(minimum=8, maximum=100)
            ),
            loader.ConfigValue(
                "use_special",
                True,
                lambda: self.strings["cfg_use_special"],
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "use_emoji",
                False,
                lambda: self.strings["cfg_use_emoji"],
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "avoid_similar",
                True,
                lambda: self.strings["cfg_avoid_similar"],
                validator=loader.validators.Boolean()
            ),
        )

    async def client_ready(self, client, db):
        self.client = client

    @staticmethod
    def calculate_entropy(password: str) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —ç–Ω—Ç—Ä–æ–ø–∏—é –ø–∞—Ä–æ–ª—è –≤ –±–∏—Ç–∞—Ö"""
        charset = 0
        if any(c.islower() for c in password):
            charset += 26
        if any(c.isupper() for c in password):
            charset += 26
        if any(c.isdigit() for c in password):
            charset += 10
        if any(c in string.punctuation for c in password):
            charset += 32
        if any(ord(c) > 0xffff for c in password):  # Emoji –∏ –¥—Ä—É–≥–∏–µ –Ω–µ-BMP —Å–∏–º–≤–æ–ª—ã
            charset += 2048
        
        return len(password) * (charset ** 0.5) / 1.4427  # –õ–æ–≥–∞—Ä–∏—Ñ–º –ø–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—é 2

    def get_strength(self, entropy: float) -> str:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è"""
        if entropy > 120:
            return "–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π üí™üî•"
        elif entropy > 80:
            return "–°–∏–ª—å–Ω—ã–π üëç"
        elif entropy > 50:
            return "–°—Ä–µ–¥–Ω–∏–π ü§î"
        return "–°–ª–∞–±—ã–π ‚ö†Ô∏è"

    def generate_password(self, length: int, use_special: bool, use_emoji: bool, avoid_similar: bool) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å"""
        chars = []
        
        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤
        chars.extend(string.ascii_letters)
        chars.extend(string.digits)
        
        if use_special:
            special_chars = "!@#$%^&*()_+-=[]{}|;:,.<>?"
            if avoid_similar:
                special_chars = special_chars.replace("l", "").replace("1", "").replace("I", "")
            chars.extend(special_chars)
        
        if use_emoji:
            emojis = ["üîë", "üîí", "üéØ", "‚ö°", "üî•", "üíé", "üõ°", "üëë", "üß†", "ü¶æ"]
            chars.extend(emojis)
        
        if avoid_similar:
            chars = [c for c in chars if c not in "l1IoO0"]
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        password = ''.join(secrets.choice(chars) for _ in range(length))
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        if use_special and not any(c in string.punctuation for c in password):
            password = password[:-1] + secrets.choice(string.punctuation)
        if use_emoji and not any(ord(c) > 0xffff for c in password):
            password = password[:-1] + secrets.choice(emojis)
        
        return password

    @loader.command()
    async def pgen(self, message):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å [preset|length]"""
        args = utils.get_args_raw(message)
        
        presets = {
            "default": (12, True, False, True),
            "strong": (16, True, False, True),
            "pin": (6, False, False, False),
            "memorable": (8, True, False, True),  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏—Ö—Å—è –ø–∞—Ä–æ–ª–µ–π
            "emoji": (8, False, True, False),
        }
        
        if not args:
            if self.config["demo_mode"]:
                examples = "\n".join(
                    f"<b>{preset}:</b> <code>{self.generate_password(*params)}</code>"
                    for preset, params in presets.items()
                )
                await utils.answer(
                    message,
                    f"{self.strings['presets']}\n\n<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n{examples}"
                )
            else:
                await utils.answer(message, self.strings["presets"])
            return
        
        if args in presets:
            length, use_special, use_emoji, avoid_similar = presets[args]
        elif args.isdigit():
            length = int(args)
            use_special = self.config["use_special"]
            use_emoji = self.config["use_emoji"]
            avoid_similar = self.config["avoid_similar"]
            length = max(self.config["min_length"], min(length, self.config["max_length"]))
        else:
            await utils.answer(message, self.strings["no_args"])
            return
        
        password = self.generate_password(length, use_special, use_emoji, avoid_similar)
        entropy = self.calculate_entropy(password)
        strength = self.get_strength(entropy)
        
        await utils.answer(
            message,
            self.strings["generated"].format(
                password=password,
                length=len(password),
                strength=strength
            )
        )

    @loader.command()
    async def pgenconfig(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        config_text = (
            f"<b>‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–∞—Ä–æ–ª–µ–π:</b>\n\n"
            f"<b>–î–µ–º–æ-—Ä–µ–∂–∏–º:</b> {'–≤–∫–ª' if self.config['demo_mode'] else '–≤—ã–∫–ª'}\n"
            f"<b>–î–ª–∏–Ω–∞:</b> –æ—Ç {self.config['min_length']} –¥–æ {self.config['max_length']}\n"
            f"<b>–°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã:</b> {'–≤–∫–ª' if self.config['use_special'] else '–≤—ã–∫–ª'}\n"
            f"<b>Emoji:</b> {'–≤–∫–ª' if self.config['use_emoji'] else '–≤—ã–∫–ª'}\n"
            f"<b>–ò–∑–±–µ–≥–∞—Ç—å –ø–æ—Ö–æ–∂–∏—Ö:</b> {'–≤–∫–ª' if self.config['avoid_similar'] else '–≤—ã–∫–ª'}\n\n"
            f"<i>–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ </i><code>.config PasswordGen</code>"
        )
        await utils.answer(message, config_text)