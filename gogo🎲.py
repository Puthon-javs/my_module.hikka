from random import randint
import re
from .. import loader, utils

@loader.tds
class DiceMod(loader.Module):
    """–ü—Ä–æ—Å—Ç–æ–π –º–æ–¥—É–ª—å –¥–ª—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤"""
    
    strings = {
        "name": "Dice",
        "dice": "üé≤ {notation}: <b>{result}</b>",
        "error": "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: .d [–∫–æ–ª-–≤–æ]d[–≥—Ä–∞–Ω–∏][+–º–æ–¥] [h|xN]\n–ü—Ä–∏–º–µ—Ä—ã:\n.d 2d6\n.d d20+3 h\n.d 3d10 x5"
    }

    async def dcmd(self, message):
        """–ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤ - .d [1]d20[+5] [h|x5]"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, self.strings["error"])

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        parts = args.split()
        dice_part = parts[0].lower().replace("–¥", "d")
        mode = parts[1] if len(parts) > 1 else ""

        # –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (d20 ‚Üí 1d20, 6 ‚Üí 1d6)
        if dice_part.startswith("d"):
            dice_part = "1" + dice_part
        elif dice_part.isdigit():
            dice_part = f"1d{dice_part}"

        # –†–∞–∑–±–∏—Ä–∞–µ–º –∫—É–±–∏–∫ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 2d10+3)
        try:
            if "+" in dice_part:
                count, rest = dice_part.split("d")
                sides, mod = rest.split("+")
                mod = int(mod)
            elif "-" in dice_part:
                count, rest = dice_part.split("d")
                sides, mod = rest.split("-")
                mod = -int(mod)
            else:
                count, sides = dice_part.split("d")
                mod = 0
            
            count = int(count) if count else 1
            sides = int(sides)
        except:
            return await utils.answer(message, self.strings["error"])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
        if count < 1 or sides < 1:
            return await utils.answer(message, "‚ùå –ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
        if count > 100 or sides > 1000:
            return await utils.answer(message, "‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞!")

        # –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤
        result = sum(randint(1, sides) for _ in range(count)) + mod

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        notation = f"{count}d{sides}"
        if mod > 0:
            notation += f"+{mod}"
        elif mod < 0:
            notation += f"{mod}"

        # –†–µ–∂–∏–º—ã –≤—ã–≤–æ–¥–∞
        if "h" in mode:
            await utils.answer(message, f"üé≤ {notation}: <spoiler><b>{result}</b></spoiler>")
        elif mode.startswith("x"):
            try:
                times = int(mode[1:])
                if times > 10:
                    return await utils.answer(message, "‚ùå –ú–∞–∫—Å–∏–º—É–º 10 –±—Ä–æ—Å–∫–æ–≤!")
                rolls = [str(sum(randint(1, sides) for _ in range(count)) + mod) for _ in range(times)]
                await utils.answer(message, f"üé≤ {notation} (√ó{times}):\n" + "\n".join(f"{i+1}. {r}" for i, r in enumerate(rolls)))
            except:
                pass
        else:
            await utils.answer(message, self.strings["dice"].format(notation=notation, result=result))