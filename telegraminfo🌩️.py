# meta developer: @Python_Javs

from hikkatl.tl.types import User
from hikkatl.tl.functions.users import GetFullUserRequest
from hikkatl.tl.functions.help import GetConfigRequest
from hikkatl.tl.functions.account import GetAuthorizationsRequest
from .. import loader, utils
import random

@loader.tds
class ClientInfoSecureMod(loader.Module):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""

    strings = {
        "name": "ClientInfoSecure",
        "cfg_hide_phone": "–°–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        "cfg_fake_phone": "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–µ–π–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä",
        "cfg_hide_location": "–°–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π IP/—Å—Ç—Ä–∞–Ω—É —Å–µ—Å—Å–∏–π",
        "cfg_fake_location": "–ü–æ–¥–º–µ–Ω—è—Ç—å IP/—Å—Ç—Ä–∞–Ω—É –≤ —Å–µ—Å—Å–∏—è—Ö",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "hide_phone",
                False,
                lambda: self.strings["cfg_hide_phone"],
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "fake_phone",
                False,
                lambda: self.strings["cfg_fake_phone"],
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "hide_location",
                False,
                lambda: self.strings["cfg_hide_location"],
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "fake_location",
                False,
                lambda: self.strings["cfg_fake_location"],
                validator=loader.validators.Boolean(),
            ),
        )

    async def clientinfocmd(self, message):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Å —É—á—ë—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏)"""
        me = await self.client.get_me()
        full = await self.client(GetFullUserRequest(me))
        auths = await self.client(GetAuthorizationsRequest())

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = f"+{me.phone}"
        if self.config["hide_phone"] and not self.config["fake_phone"]:
            phone = "—Å–∫—Ä—ã—Ç–æ"
        elif self.config["fake_phone"]:
            phone = f"+7{random.randint(9000000000, 9999999999)}"

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–µ–π–∫–æ–≤—ã—Ö –ª–æ–∫–∞—Ü–∏–π
        fake_countries = ["USA", "Germany", "Japan", "Brazil", "Russia"]
        fake_ips = [
            f"192.168.{random.randint(1, 255)}.{random.randint(1, 255)}",
            f"10.{random.randint(0, 255)}.{random.randint(0, 255)}.1",
        ]

        client_info = (
            "üõú <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {me.first_name}\n"
            f"üìõ <b>–§–∞–º–∏–ª–∏—è:</b> {me.last_name or '–ù–µ—Ç'}\n"
            f"üîó <b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{me.username or '–ù–µ—Ç'}\n"
            f"üÜî <b>ID:</b> <code>{me.id}</code>\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            f"üìù <b>–ë–∏–æ:</b> {full.full_user.about or '–ù–µ—Ç'}\n\n"
            "üì° <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:</b>\n"
        )

        for i, auth in enumerate(auths.authorizations, 1):
            country = auth.country
            ip = auth.ip

            if self.config["hide_location"] and not self.config["fake_location"]:
                country = "—Å–∫—Ä—ã—Ç–æ"
                ip = "—Å–∫—Ä—ã—Ç–æ"
            elif self.config["fake_location"]:
                country = random.choice(fake_countries)
                ip = random.choice(fake_ips)

            client_info += (
                f"  {i}. <b>{auth.app_name} {auth.app_version}</b>\n"
                f"  üì± <i>{auth.device_model} ({auth.system_version})</i>\n"
                f"  üåê <i>{country} (IP: {ip})</i>\n"
                f"  üïí <i>{auth.date_created.strftime('%d.%m.%Y %H:%M')}</i>\n\n"
            )

        await utils.answer(message, client_info)