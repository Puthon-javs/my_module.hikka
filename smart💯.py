from hikkatl.types import Message
from .. import loader, utils
import json
import os
from datetime import datetime

@loader.tds
class SmartSaverMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    strings = {
        "name": "SmartSaver",
        "saved": "üíæ <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b> <code>{}</code>!",
        "no_keywords": "‚ùå <b>–ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!</b>",
        "show_saved": "üìÇ <b>–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n{}",
        "empty": "üì≠ <b>–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç</b>",
        "deleted": "üóë <b>–£–¥–∞–ª–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "keywords",
                "–≤–∞–∂–Ω–æ,—Å—Ä–æ—á–Ω–æ,—Å–æ—Ö—Ä–∞–Ω–∏",
                lambda: "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é",
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "auto_save",
                True,
                lambda: "–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤",
                validator=loader.validators.Boolean()
            ),
        )
        self.data_file = "smartsaver_data.json"
        self.data = self._load_data()

    def _load_data(self):
        if not os.path.exists(self.data_file):
            return {"text": [], "photo": [], "link": [], "document": []}
        
        with open(self.data_file, "r", encoding="utf-8") as f:
            return json.load(f)

    def _save_data(self):
        with open(self.data_file, "w", encoding="utf-8") as f:
            json.dump(self.data, f, ensure_ascii=False, indent=2)

    async def watcher(self, message: Message):
        if not self.config["auto_save"] or not message.text:
            return

        keywords = [k.strip().lower() for k in self.config["keywords"].split(",")]
        text = message.text.lower()
        
        if any(keyword in text for keyword in keywords):
            category = self._detect_category(message)
            if category:
                self._save_message(message, category)

    def _detect_category(self, message: Message) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if message.photo:
            return "photo"
        elif message.document:
            return "document"
        elif "http://" in message.text or "https://" in message.text:
            return "link"
        return "text"

    def _save_message(self, message: Message, category: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
        save_data = {
            "text": message.text,
            "date": str(datetime.now()),
            "chat": utils.get_chat_id(message),
            "sender": message.sender_id
        }
        self.data[category].append(save_data)
        self._save_data()

    @loader.command(alias="ssave")
    async def savemancmd(self, message: Message):
        """–í—Ä—É—á–Ω—É—é —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ)"""
        reply = await message.get_reply_message()
        if not reply:
            await utils.answer(message, "‚ùå <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!</b>")
            return

        category = self._detect_category(reply)
        self._save_message(reply, category)
        await utils.answer(
            message,
            self.strings["saved"].format(category)
        )

    @loader.command(alias="sshow")
    async def showdatacmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é)"""
        args = utils.get_args_raw(message)
        category = args.lower() if args else None

        if category and category in self.data:
            items = self.data[category]
            if not items:
                await utils.answer(message, self.strings["empty"])
                return
                
            result = "\n".join(
                f"‚ñ™ {item['date']}: {item['text'][:50]}..."
                for item in items[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
            )
        else:
            result = ""
            for cat, items in self.data.items():
                result += f"\n‚ñ´ <b>{cat}</b>: {len(items)} –∑–∞–ø–∏—Å–µ–π\n"

        await utils.answer(
            message,
            self.strings["show_saved"].format(result)
        )

    @loader.command(alias="sclear")
    async def cleardatacmd(self, message: Message):
        """–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é)"""
        args = utils.get_args_raw(message)
        if args and args in self.data:
            count = len(self.data[args])
            self.data[args] = []
            msg = self.strings["deleted"].format(count)
        else:
            total = 0
            for cat in self.data:
                total += len(self.data[cat])
                self.data[cat] = []
            msg = self.strings["deleted"].format(f"–≤—Å–µ {total}")

        self._save_data()
        await utils.answer(message, msg)