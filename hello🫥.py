from hikkatl.types import Message
from .. import loader, utils
import re

@loader.tds
class AutoReactionMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–≤–∏—Ç —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    strings = {
        "name": "AutoReaction",
        "cfg_auto_like": "–ê–≤—Ç–æ–ª–∞–π–∫–∏–Ω–≥ —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
        "cfg_reaction_rules": "–ü—Ä–∞–≤–∏–ª–∞ —Ä–µ–∞–∫—Ü–∏–π (—Ñ–æ—Ä–º–∞—Ç: '—Å–ª–æ–≤–æ:—ç–º–æ–¥–∂–∏')",
        "cfg_blacklist": "–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
        "liked_msg": "üëç <b>–ê–≤—Ç–æ–ª–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω!</b>",
        "reaction_added": "{} <b>–†–µ–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞:</b> <i>{}</i>",
        "stats": "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∞–∫—Ü–∏–π:</b>\n\n{}",
        "no_stats": "üì≠ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞!</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "auto_like",
                True,
                lambda: self.strings["cfg_auto_like"],
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "reaction_rules",
                "–ª—é–±–ª—é:‚ù§Ô∏è,—Å–ø–∞—Å–∏–±–æ:üôè,–ø–æ—á–µ–º—É:ü§î",
                lambda: self.strings["cfg_reaction_rules"],
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "blacklist",
                "",
                lambda: self.strings["cfg_blacklist"],
                validator=loader.validators.String()
            ),
        )
        self.reaction_stats = {}

    async def client_ready(self, client, db):
        self.client = client

    async def watcher(self, message: Message):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        chat_id = utils.get_chat_id(message)
        if str(chat_id) in self.config["blacklist"].split(","):
            return

        # –ê–≤—Ç–æ–ª–∞–π–∫–∏–Ω–≥ —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if self.config["auto_like"] and message.out:
            try:
                await message.react("‚ù§Ô∏è")
                self.update_stats("‚ù§Ô∏è")
            except:
                pass

        # –†–µ–∞–∫—Ü–∏–∏ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º
        if message.text:
            text = message.text.lower()
            for rule in self.config["reaction_rules"].split(","):
                if ":" not in rule:
                    continue
                word, emoji = rule.split(":", 1)
                if word.strip() in text:
                    try:
                        await message.react(emoji.strip())
                        self.update_stats(emoji.strip())
                    except:
                        pass

    def update_stats(self, emoji: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∞–∫—Ü–∏–π"""
        self.reaction_stats[emoji] = self.reaction_stats.get(emoji, 0) + 1

    @loader.command(alias="rstats")
    async def reactionstatscmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∞–∫—Ü–∏–π"""
        if not self.reaction_stats:
            await utils.answer(message, self.strings["no_stats"])
            return

        stats_text = "\n".join(
            f"‚ñ™ {emoji} ‚Äî {count} —Ä–∞–∑"
            for emoji, count in sorted(
                self.reaction_stats.items(),
                key=lambda x: x[1],
                reverse=True
            )
        )
        await utils.answer(
            message,
            self.strings["stats"].format(stats_text)
        )

    @loader.command(alias="addreact")
    async def addreactioncmd(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ —Ä–µ–∞–∫—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä: .addreact –ø—Ä–∏–≤–µ—Ç:üëã"""
        args = utils.get_args_raw(message)
        if not args or ":" not in args:
            await utils.answer(message, "‚ùå <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b> <code>.addreact —Å–ª–æ–≤–æ:—ç–º–æ–¥–∂–∏</code>")
            return

        word, emoji = args.split(":", 1)
        current_rules = self.config["reaction_rules"]
        if current_rules:
            current_rules += ","
        self.config["reaction_rules"] = current_rules + f"{word.strip()}:{emoji.strip()}"
        
        await utils.answer(
            message,
            self.strings["reaction_added"].format(emoji.strip(), word.strip())
        )