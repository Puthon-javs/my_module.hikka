from hikkatl.types import Message
from hikkatl.tl.functions.messages import DeleteMessagesRequest
from hikkatl.utils import get_display_name
from .. import loader, utils
import time
from collections import defaultdict


@loader.tds
class AntiTelegramRulesMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞—Ä—É—à–∞—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª–∞ Telegram"""
    
    strings = {
        "name": "AntiTelegramRules",
        "enabled": "‚úÖ <b>–ê–Ω—Ç–∏-–ø—Ä–∞–≤–∏–ª–∞ Telegram –≤–∫–ª—é—á–µ–Ω—ã</b>\n–í—Å–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å—Å—è",
        "disabled": "‚ùå <b>–ê–Ω—Ç–∏-–ø—Ä–∞–≤–∏–ª–∞ Telegram –≤—ã–∫–ª—é—á–µ–Ω—ã</b>",
        "deleted": "üóë <b>–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–≥–ª–æ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ Telegram</b>\n–ü—Ä–∏—á–∏–Ω–∞: <code>{}</code>",
        "stats": "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AntiTelegramRules:</b>\n"
                "‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <code>{}</code>\n"
                "‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–¥–∞–ª–µ–Ω–∏–µ: <code>{}</code> –Ω–∞–∑–∞–¥\n"
                "‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–∏—á–∏–Ω–∞: <code>{}</code>",
        "flood_warn": "‚ö†Ô∏è <b>–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ —Ñ–ª—É–¥–∏—Ç—å!</b>\n–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ!",
        "insult_warn": "‚ö†Ô∏è <b>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è!</b>\n–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ!",
    }

    strings_ru = strings

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "enabled",
                True,
                lambda: "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–ø–∞—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "delete_own",
                True,
                lambda: "–£–¥–∞–ª—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–∞—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "delete_others",
                True,
                lambda: "–£–¥–∞–ª—è—Ç—å –æ–ø–∞—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "keywords",
                ["—Å–ø–∞–º", "—Ñ–∏—à–∏–Ω–≥", "–≤–∑–ª–æ–º", "–≤–∑–ª–æ–º–∞—Ç—å", "ddos", "—Ö–∞–∫", "–Ω–∞—Ä–∫–æ—Ç–∏–∫–∏", "–æ—Ä—É–∂–∏–µ"],
                lambda: "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                validator=loader.validators.Series()
            ),
            loader.ConfigValue(
                "insults",
                ["–¥—É—Ä–∞–∫", "–∏–¥–∏–æ—Ç", "–¥–µ–±–∏–ª", "—Ç—É–ø–æ–π", "–ª–æ—Ö", "–ø—Ä–∏–¥—É—Ä–æ–∫", "–∫—Ä–µ—Ç–∏–Ω"],
                lambda: "–°–ø–∏—Å–æ–∫ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π",
                validator=loader.validators.Series()
            ),
            loader.ConfigValue(
                "max_message_length",
                2000,
                lambda: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–∏–º–≤–æ–ª–æ–≤)",
                validator=loader.validators.Integer(minimum=100, maximum=5000)
            ),
            loader.ConfigValue(
                "flood_time",
                5,
                lambda: "–í—Ä–µ–º—è –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –∞–Ω—Ç–∏—Ñ–ª—É–¥–∞ (—Å–µ–∫—É–Ω–¥—ã)",
                validator=loader.validators.Integer(minimum=1, maximum=60)
            ),
            loader.ConfigValue(
                "flood_count",
                5,
                lambda: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥ –¥–ª—è –∞–Ω—Ç–∏—Ñ–ª—É–¥–∞",
                validator=loader.validators.Integer(minimum=2, maximum=20)
            ),
            loader.ConfigValue(
                "report_to_admins",
                False,
                lambda: "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "warn_before_delete",
                True,
                lambda: "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º",
                validator=loader.validators.Boolean()
            )
        )
        self.stats = {
            "total_deleted": 0,
            "last_deleted": None,
            "last_reason": None,
            "flood_data": defaultdict(lambda: {"count": 0, "last_time": 0}),
            "user_last_message": {}
        }

    async def client_ready(self, client, db):
        self._client = client
        self._db = db

    @loader.command(ru_doc="–í–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram")
    async def atr_on(self, message: Message):
        """Enable Anti-Telegram Rules protection"""
        self.config["enabled"] = True
        await utils.answer(message, self.strings("enabled"))

    @loader.command(ru_doc="–í—ã–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram")
    async def atr_off(self, message: Message):
        """Disable Anti-Telegram Rules protection"""
        self.config["enabled"] = False
        await utils.answer(message, self.strings("disabled"))

    @loader.command(ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–¥–∞–ª–µ–Ω–∏–π")
    async def atr_stats(self, message: Message):
        """Show deletion statistics"""
        last_deleted = "–Ω–∏–∫–æ–≥–¥–∞"
        if self.stats["last_deleted"]:
            last_deleted = utils.format_timedelta(utils.get_time() - self.stats["last_deleted"])
        
        await utils.answer(
            message,
            self.strings("stats").format(
                self.stats["total_deleted"],
                last_deleted,
                self.stats["last_reason"] or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            )
        )

    async def watcher(self, message: Message):
        if not self.config["enabled"]:
            return

        if not isinstance(message, Message):
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–ª—É–¥
        flood_reason = await self.check_flood(message)
        if flood_reason:
            await self.delete_message(message, flood_reason)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è
        insult_reason = await self.check_insults(message)
        if insult_reason:
            if self.config["warn_before_delete"]:
                await message.respond(self.strings("insult_warn"))
            await self.delete_message(message, insult_reason)
            return

        # –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        danger_reason = await self.check_message(message)
        if danger_reason:
            await self.delete_message(message, danger_reason)

    async def check_flood(self, message: Message) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–ª—É–¥"""
        user_id = message.sender_id
        chat_id = utils.get_chat_id(message)
        now = time.time()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–ª—É–¥–µ
        flood_key = f"{chat_id}_{user_id}"
        flood_data = self.stats["flood_data"][flood_key]
        
        if now - flood_data["last_time"] > self.config["flood_time"]:
            flood_data["count"] = 1
        else:
            flood_data["count"] += 1
        
        flood_data["last_time"] = now
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
        if flood_data["count"] >= self.config["flood_count"]:
            if self.config["warn_before_delete"] and flood_data["count"] == self.config["flood_count"]:
                await message.respond(self.strings("flood_warn"))
                return None
            return f"–§–ª—É–¥ ({flood_data['count']} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {self.config['flood_time']} —Å–µ–∫)"
        
        return None

    async def check_insults(self, message: Message) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è"""
        text = utils.get_args_raw(message) or ""
        text_lower = text.lower()
        
        for insult in self.config["insults"]:
            if insult.lower() in text_lower:
                return f"–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ ({insult})"
        
        return None

    async def check_message(self, message: Message) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        text = utils.get_args_raw(message) or ""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(text) > self.config["max_message_length"]:
            return f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        text_lower = text.lower()
        for keyword in self.config["keywords"]:
            if keyword.lower() in text_lower:
                return f"–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ ({keyword})"
        
        return None

    async def delete_message(self, message: Message, reason: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            await message.delete()
            
            self.stats["total_deleted"] += 1
            self.stats["last_deleted"] = utils.get_time()
            self.stats["last_reason"] = reason
            
            if self.config["report_to_admins"]:
                await message.respond(self.strings("deleted").format(reason))
        except Exception as e:
            logger.error(f"Failed to delete message: {e}")

    @loader.command(ru_doc="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
    async def atr_check(self, message: Message):
        """Check message for dangerous content"""
        reply = await message.get_reply_message()
        if not reply:
            await utils.answer(message, "‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
        
        checks = [
            ("–§–ª—É–¥", await self.check_flood(reply)),
            ("–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è", await self.check_insults(reply)),
            ("–û–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç", await self.check_message(reply)),
        ]
        
        results = []
        for check_name, result in checks:
            if result:
                results.append(f"‚ö†Ô∏è {check_name}: {result}")
        
        if results:
            await utils.answer(message, "\n".join(results))
        else:
            await utils.answer(message, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ")

    @loader.command(ru_doc="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ñ–ª—É–¥–∞")
    async def atr_clearflood(self, message: Message):
        """Clear flood history"""
        self.stats["flood_data"].clear()
        await utils.answer(message, "‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ñ–ª—É–¥–∞ –æ—á–∏—â–µ–Ω–∞")