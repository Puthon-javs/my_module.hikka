# Proprietary License Agreement

# Copyright (c) 2024-29 CodWiz

# Permission is hereby granted... [–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π]

# ---------------------------------------------------------------------------------
# Name: SpamBan üö´
# Description: Check spam ban for your account.
# Author: @ManagerMatrix
# ---------------------------------------------------------------------------------
# meta developer: @Python_Javs
# scope: CheckSpamBan
# scope: CheckSpamBan 0.0.1
# ---------------------------------------------------------------------------------

from .. import loader, utils
from ..utils import answer
from telethon.tl.types import Message

__version__ = (1, 0, 1)  # –£–≤–µ–ª–∏—á–∏–ª –≤–µ—Ä—Å–∏—é

@loader.tds
class SpamBanCheckMod(loader.Module):
    """Check spam ban for your account."""

    strings = {
        "name": "SpamBan üö´",
        "svo": "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å–≤–æ–±–æ–¥–µ–Ω –æ—Ç –∫–∞–∫–∏—Ö-–ª–∏–±–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
        "good": "<b>‚úÖ –í—Å–µ —Ö–æ—Ä–æ—à–æ! –£ –≤–∞—Å –Ω–µ—Ç —Å–ø–∞–º-–±–∞–Ω–∞ –º–æ–∂–µ—Ç–µ –∏—Ç–∏ –¥–∞–ª—å—à–µ —Å–ø–∞–º–∏—Ç—å.</b>",
        "spamban": "<b>‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º-–±–∞–Ω! –Ω–µ –ø–æ–≤–µ–∑–ª–æ —Ç–µ–±–µ \n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–†–µ—à–µ–Ω–∏–µ: {solution}</b>",
        "unknown": "<b>‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç SpamBot:\n\n{response}</b>",
        "error": "<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º-–±–∞–Ω–∞: {error}</b>"
    }

    @loader.command(
        ru_doc="–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞—à—É —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –Ω–∞ —Å–ø–∞–º-–±–∞–Ω —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ @SpamBot",
        en_doc="Checks your account for spam ban via @SpamBot bot",
    )
    async def spambancmd(self, message: Message):
        """Check spam ban status"""
        try:
            async with self._client.conversation("@SpamBot") as conv:
                msg = await conv.send_message("/start")
                r = await conv.get_response()
                
                if r.text == self.strings("svo"):
                    text = self.strings("good")
                else:
                    response_lines = [line.strip() for line in r.text.split("\n") if line.strip()]
                    
                    # –ë–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
                    reason = "Not specified"
                    solution = "Contact @SpamBot for details"
                    
                    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –∏ —Ä–µ—à–µ–Ω–∏–µ
                    for i, line in enumerate(response_lines):
                        if "reason" in line.lower() or "–ø—Ä–∏—á–∏–Ω–∞" in line.lower():
                            reason = line
                            if i+1 < len(response_lines):
                                reason += "\n" + response_lines[i+1]
                        elif "solution" in line.lower() or "—Ä–µ—à–µ–Ω–∏–µ" in line.lower():
                            solution = line
                            if i+1 < len(response_lines):
                                solution += "\n" + response_lines[i+1]
                    
                    if len(response_lines) > 1:
                        text = self.strings("spamban").format(reason=reason, solution=solution)
                    else:
                        text = self.strings("unknown").format(response=r.text)
                
                await msg.delete()
                await r.delete()
                await answer(message, text)
                
        except Exception as e:
            await answer(message, self.strings("error").format(error=str(e)))