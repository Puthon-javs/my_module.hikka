from hikka import loader, utils
import logging
import asyncio
import random
import os
import time
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
import aiohttp
import hashlib
import textwrap
import json

logger = logging.getLogger(__name__)

class UltimatePowerMod(loader.Module):
    """–ú–æ–¥—É–ª—å Ultimate Power —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏"""
    
    strings = {
        "name": "UltimatePower",
        "loading": "üåÄ <b>–ì–æ—Ç–æ–≤–ª—é —á—Ç–æ-—Ç–æ —ç–ø–∏—á–Ω–æ–µ...</b>",
        "hack_progress": "üíª <b>–í–∑–ª–∞–º—ã–≤–∞—é {target}...\n{animation}</b>",
        "hack_success": "üîì <b>–í–∑–ª–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n<code>–¶–µ–ª—å: {target}\n–î–æ—Å—Ç—É–ø: {access}\nIP: {ip}\n–í—Ä–µ–º—è: {time}—Å–µ–∫</code>",
        "no_reply": "‚ùå <b>–ù—É–∂–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>",
        "anon_sent": "üëª <b>–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>",
        "tts_created": "üó£ <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>",
        "deepfake_start": "üé≠ <b>–°–æ–∑–¥–∞—é –¥–∏–ø—Ñ–µ–π–∫...</b>",
        "ai_thinking": "ü§ñ <b>–ò–ò —Ä–∞–∑–º—ã—à–ª—è–µ—Ç...</b>",
        "meme_processing": "üñº <b>–°–æ–∑–¥–∞—é –≤–∞—à –º–µ–º...</b>",
        "ui_header": "üöÄ <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Ultimate Power</b>",
        "encrypted": "üîê <b>–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ:</b>\n<code>{text}</code>",
        "decrypted": "üîì <b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ:</b>\n<code>{text}</code>",
        "error": "‚ùå <b>–û—à–∏–±–∫–∞:</b> {error}"
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "hack_style",
                "matrix",
                "–°—Ç–∏–ª—å –∞–Ω–∏–º–∞—Ü–∏–∏ –≤–∑–ª–æ–º–∞",
                validator=loader.validators.Choice(["matrix", "cyberpunk", "retro"])
            ),
            loader.ConfigValue(
                "ai_provider",
                "gpt-4",
                "–ü—Ä–æ–≤–∞–π–¥–µ—Ä –ò–ò –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞",
                validator=loader.validators.Choice(["gpt-4", "claude-3", "llama-3"])
            ),
            loader.ConfigValue(
                "encryption_key",
                "ultrasecret",
                "–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                validator=loader.validators.String()
            )
        )
        
        self.session = aiohttp.ClientSession()
        self.animations = {
            "matrix": ["010101", "101010", "111000", "001110"],
            "cyberpunk": ["‚ö°‚ö°‚ö°", "‚ú®‚ú®‚ú®", "üîÆüîÆüîÆ", "üí•üí•üí•"],
            "retro": ["[–ó–ê–ì–†–£–ó–ö–ê]", "[–í–ó–õ–ê–ú–´–í–ê–Æ]", "[–ü–†–û–ù–ò–ö–ê–Æ]", "[–î–û–°–¢–£–ü]"]
        }
        
        self.targets = {
            "gov": ["–ü–µ–Ω—Ç–∞–≥–æ–Ω", "–§–°–ë", "–ì–†–£", "–¶–†–£"],
            "crypto": ["–ë–∏—Ç–∫–æ–∏–Ω", "–≠—Ñ–∏—Ä–∏—É–º", "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã"],
            "tech": ["–Ø–Ω–¥–µ–∫—Å", "–í–ö–æ–Ω—Ç–∞–∫—Ç–µ", "–°–±–µ—Ä–±–∞–Ω–∫", "Telegram"]
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        self.font = None
        try:
            self.font = ImageFont.truetype("arial.ttf", 24)
        except:
            try:
                self.font = ImageFont.load_default()
            except:
                self.font = None
    
    async def client_ready(self, client, db):
        self._client = client
    
    async def _animate_hack(self, message, target):
        style = self.config["hack_style"]
        last_text = ""
        for _ in range(8):
            frame = random.choice(self.animations[style])
            new_text = self.strings["hack_progress"].format(
                target=target,
                animation=frame
            )
            if new_text != last_text:
                try:
                    await message.edit(new_text)
                    last_text = new_text
                except:
                    pass
            await asyncio.sleep(0.3)
    
    async def _generate_meme(self, image_bytes, text):
        try:
            img = Image.open(BytesIO(image_bytes))
            
            if img.size[0] > 512 or img.size[1] > 512:
                img.thumbnail((512, 512))
            
            draw = ImageDraw.Draw(img)
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
            try:
                text = text.encode('utf-8').decode('utf-8')
            except:
                text = "–ú–µ–º —Ç–µ–∫—Å—Ç"
            
            lines = textwrap.wrap(text, width=20)
            y_pos = 10
            
            for line in lines:
                x = img.width // 2
                
                if self.font:
                    # –†–∏—Å—É–µ–º –æ–±–≤–æ–¥–∫—É
                    for x_offset in [-1, 1]:
                        for y_offset in [-1, 1]:
                            try:
                                draw.text(
                                    (x + x_offset, y_pos + y_offset),
                                    line, font=self.font, fill="black",
                                    anchor="mm"
                                )
                            except:
                                pass
                    
                    # –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
                    try:
                        draw.text(
                            (x, y_pos), line, font=self.font, fill="white",
                            anchor="mm"
                        )
                    except:
                        draw.text(
                            (x, y_pos), line, fill="white",
                            anchor="mm"
                        )
                else:
                    draw.text(
                        (x, y_pos), line, fill="white",
                        anchor="mm"
                    )
                
                y_pos += 30
            
            output = BytesIO()
            img.save(output, format="PNG")
            output.seek(0)
            return output
        
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞")
            raise e
    
    @loader.command()
    async def hack(self, message):
        """–°–∏–º—É–ª—è—Ç–æ—Ä –≤–∑–ª–æ–º–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        try:
            target_type = random.choice(list(self.targets.keys()))
            target = random.choice(self.targets[target_type])
            
            msg = await message.respond(self.strings["loading"])
            await self._animate_hack(msg, target)
            
            result = self.strings["hack_success"].format(
                target=target,
                access=random.choice(["root", "admin", "–ø–æ–ª–Ω—ã–π"]),
                ip=f"{random.randint(1,255)}.{random.randint(1,255)}.{random.randint(1,255)}.{random.randint(1,255)}",
                time=f"{random.randint(1,10)}.{random.randint(10,59)}"
            )
            
            await msg.edit(result)
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(error=str(e)))
    
    @loader.command()
    async def anon(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)"""
        try:
            reply = await message.get_reply_message()
            if not reply:
                await utils.answer(message, self.strings["no_reply"])
                return
            
            text = utils.get_args_raw(message)
            if not text:
                await utils.answer(message, "‚ùå <b>–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!</b>")
                return
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ MessageIdInvalidError
            await self._client.send_message(
                entity=reply.peer_id,
                message=f"<i>–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</i>\n{text}",
                reply_to=reply.id
            )
            await message.delete()
            await utils.answer(message, self.strings["anon_sent"])
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(error=str(e)))
    
    @loader.command()
    async def tts(self, message):
        """–°–æ–∑–¥–∞—Ç—å TTS –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            text = utils.get_args_raw(message)
            if not text:
                await utils.answer(message, "‚ùå <b>–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è TTS!</b>")
                return
            
            msg = await utils.answer(message, self.strings["tts_created"])
            await asyncio.sleep(1)
            
            length = len(text.split())
            await msg.edit(
                f"üó£ <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!</b>\n"
                f"<code>–î–ª–∏–Ω–∞: {length} —Å–ª–æ–≤\n"
                f"–ì–æ–ª–æ—Å: {random.choice(['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π', '–†–æ–±–æ—Ç'])}\n"
                f"–ö–∞—á–µ—Å—Ç–≤–æ: {random.randint(80,100)}%</code>"
            )
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(error=str(e)))
    
    @loader.command()
    async def deepfake(self, message):
        """–°–æ–∑–¥–∞—Ç—å –¥–∏–ø—Ñ–µ–π–∫ (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ)"""
        try:
            reply = await message.get_reply_message()
            if not reply or not reply.media:
                await utils.answer(message, self.strings["no_reply"])
                return
            
            msg = await utils.answer(message, self.strings["deepfake_start"])
            await asyncio.sleep(5)
            
            result = (
                "üé≠ <b>–î–∏–ø—Ñ–µ–π–∫ –≥–æ—Ç–æ–≤!</b>\n"
                f"<code>–¢–æ—á–Ω–æ—Å—Ç—å: {random.randint(85,99)}%\n"
                f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {random.randint(2,8)}.{random.randint(10,59)}—Å\n"
                f"–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: {random.randint(1,15)}%</code>"
            )
            
            await msg.edit(result)
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(error=str(e)))
    
    @loader.command()
    async def ai(self, message):
        """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò"""
        try:
            question = utils.get_args_raw(message)
            if not question:
                await utils.answer(message, "‚ùå <b>–ù—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å!</b>")
                return
            
            msg = await utils.answer(message, self.strings["ai_thinking"])
            await asyncio.sleep(2)
            
            responses = [
                "–ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π.",
                "–ú–æ–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–∞—é—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.",
                "–≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.",
                "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: 87.3%.",
                "–¢–µ–æ—Ä–µ—Ç–∏–∫–∏ –≥–æ–≤–æ—Ä—è—Ç '–¥–∞'.",
                "42. –û—Ç–≤–µ—Ç –≤—Å–µ–≥–¥–∞ 42."
            ]
            
            response = (
                f"ü§ñ <b>–û—Ç–≤–µ—Ç –ò–ò ({self.config['ai_provider']}):</b>\n"
                f"<i>{random.choice(responses)}</i>\n\n"
                f"<code>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {random.randint(75,98)}%\n"
                f"–¢–æ–∫–µ–Ω—ã: {random.randint(50,250)}</code>"
            )
            
            await msg.edit(response)
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(error=str(e)))
    
    @loader.command()
    async def meme(self, message):
        """–°–æ–∑–¥–∞—Ç—å –º–µ–º (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)"""
        try:
            reply = await message.get_reply_message()
            if not reply or not reply.media:
                await utils.answer(message, self.strings["no_reply"])
                return
            
            text = utils.get_args_raw(message)
            if not text:
                await utils.answer(message, "‚ùå <b>–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–º–∞!</b>")
                return
            
            msg = await utils.answer(message, self.strings["meme_processing"])
            
            image = BytesIO()
            await reply.download_media(image)
            image.seek(0)
            
            meme = await self._generate_meme(image.read(), text)
            await msg.delete()
            await message.reply(file=meme, caption="üñº <b>–í–∞—à –º–µ–º –≥–æ—Ç–æ–≤!</b>")
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(error=str(e)))
    
    @loader.command()
    async def encrypt(self, message):
        """–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"""
        try:
            text = utils.get_args_raw(message)
            if not text:
                await utils.answer(message, "‚ùå <b>–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è!</b>")
                return
            
            encrypted = hashlib.sha256(
                (text + self.config["encryption_key"]).encode()
            ).hexdigest()
            
            await utils.answer(
                message,
                self.strings["encrypted"].format(text=encrypted)
            )
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(error=str(e)))
    
    @loader.command()
    async def panel(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            buttons = [
                [
                    {"text": "–í–∑–ª–æ–º", "callback": self.hack},
                    {"text": "–ò–ò", "callback": self.ai}
                ],
                [
                    {"text": "–ú–µ–º", "callback": self.meme},
                    {"text": "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", "callback": self.encrypt}
                ]
            ]
            
            await utils.answer(
                message,
                self.strings["ui_header"],
                reply_markup=utils.chunks(buttons, 2)
            )
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(error=str(e)))
    
    async def on_callback(self, call):
        try:
            if call.data == "hack":
                await self.hack(call.message)
            elif call.data == "ai":
                await self.ai(call.message)
            elif call.data == "meme":
                await call.edit("üñº <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å .meme —Ç–µ–∫—Å—Ç</b>")
            elif call.data == "encrypt":
                await call.edit("üîê <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .encrypt —Ç–µ–∫—Å—Ç</b>")
        except Exception as e:
            await call.answer(self.strings["error"].format(error=str(e)), alert=True)
    
    async def on_unload(self):
        try:
            await self.session.close()
        except:
            pass