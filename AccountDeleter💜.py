from telethon import functions, types
from .. import loader, utils
import asyncio
import time
import requests
from io import BytesIO

@loader.tds
class FakeAccountDeleteMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –≤–∏–¥–∏–º–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ (—Ñ–µ–π–∫–æ–≤–æ–≥–æ) —Å –æ—Ç—á–µ—Ç–æ–º"""
    strings = {
        "name": "Fake Account Delete",
        "warning": "‚ö†Ô∏è –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤–∏–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç\n\n–≠—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ–≤–∏–¥–∏–º—ã–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–æ –∞–∫–∫–∞—É–Ω—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ .–æ—Ç–º–µ–Ω–∞",
        "processing": "üîπ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –≤–∏–¥–∏–º–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞...",
        "cancelled": "‚ùå –í–∏–¥–∏–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        "cancel_cmd": ".–æ—Ç–º–µ–Ω–∞",
        "error": "‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {}: {}",
        "success": "‚úÖ –í–∏–¥–∏–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
        "step_username": "üîπ –®–∞–≥ 1/4: –£–¥–∞–ª–µ–Ω–∏–µ —é–∑–µ—Ä–Ω–µ–π–º–∞...",
        "step_username_done": "   ‚úîÔ∏è –Æ–∑–µ—Ä–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
        "step_name": "üîπ –®–∞–≥ 2/4: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è...",
        "step_name_done": "   ‚úîÔ∏è –ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 'Deleted Account'",
        "step_photos": "üîπ –®–∞–≥ 3/4: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è...",
        "step_photos_done": "   ‚úîÔ∏è –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —É–¥–∞–ª–µ–Ω—ã",
        "step_avatar": "üîπ –®–∞–≥ 4/4: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏...",
        "step_avatar_done": "   ‚úîÔ∏è –ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
    }

    def __init__(self):
        self.pending_deletions = {}
        self.default_avatar_url = "https://i.imgur.com/p5bczYy.jpeg"

    async def download_avatar(self):
        try:
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
            response = requests.get(self.default_avatar_url, headers=headers, timeout=15)
            response.raise_for_status()
            if not response.headers.get('Content-Type', '').startswith('image/'):
                raise ValueError("URL –Ω–µ –≤–µ–¥–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return BytesIO(response.content)
        except Exception as e:
            print(f"[FakeDelete] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")
            return None

    async def set_default_avatar(self, client):
        avatar_bytes = await self.download_avatar()
        if not avatar_bytes:
            return False
        try:
            avatar_bytes.seek(0)
            file = await client.upload_file(avatar_bytes)
            await client(functions.photos.UploadProfilePhotoRequest(file=file))
            return True
        except Exception as e:
            print(f"[FakeDelete] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")
            return False

    async def remove_username(self, client):
        try:
            await client(functions.account.UpdateUsernameRequest(username=""))
            return True
        except Exception as e:
            print(f"[FakeDelete] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —é–∑–µ—Ä–Ω–µ–π–º–∞: {e}")
            return False

    async def report_progress(self, message, text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
        await utils.answer(message, text)
        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏

    async def fakedeletecmd(self, message):
        user_id = message.sender_id
        current_time = time.time()

        if self.strings["cancel_cmd"].lower() in message.text.lower():
            if user_id in self.pending_deletions:
                del self.pending_deletions[user_id]
                await utils.answer(message, self.strings["cancelled"])
            return

        if user_id in self.pending_deletions and current_time - self.pending_deletions[user_id] < 30:
            await self.report_progress(message, self.strings["processing"])

            try:
                # –®–∞–≥ 1: –£–¥–∞–ª–µ–Ω–∏–µ —é–∑–µ—Ä–Ω–µ–π–º–∞
                await self.report_progress(message, self.strings["step_username"])
                if not await self.remove_username(message.client):
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º")
                await self.report_progress(message, self.strings["step_username_done"])

                # –®–∞–≥ 2: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
                await self.report_progress(message, self.strings["step_name"])
                await message.client(functions.account.UpdateProfileRequest(
                    first_name="Deleted",
                    last_name="Account",
                    about="This account is no longer available"
                ))
                await self.report_progress(message, self.strings["step_name_done"])

                # –®–∞–≥ 3: –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
                await self.report_progress(message, self.strings["step_photos"])
                photos = await message.client.get_profile_photos('me')
                if photos:
                    await message.client(functions.photos.DeletePhotosRequest(photos))
                await self.report_progress(message, self.strings["step_photos_done"])

                # –®–∞–≥ 4: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
                await self.report_progress(message, self.strings["step_avatar"])
                if not await self.set_default_avatar(message.client):
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É")
                await self.report_progress(message, self.strings["step_avatar_done"])

                # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await utils.answer(message, self.strings["success"])

            except Exception as e:
                await utils.answer(message, self.strings["error"].format("–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏", str(e)))
            finally:
                if user_id in self.pending_deletions:
                    del self.pending_deletions[user_id]
        else:
            self.pending_deletions[user_id] = current_time
            await utils.answer(message, self.strings["warning"])
            
            async def cleanup():
                await asyncio.sleep(30)
                if user_id in self.pending_deletions:
                    del self.pending_deletions[user_id]
            
            asyncio.create_task(cleanup())

    async def watcher(self, message):
        if not message.out:
            return
            
        if self.strings["cancel_cmd"].lower() in message.text.lower():
            user_id = message.sender_id
            if user_id in self.pending_deletions:
                del self.pending_deletions[user_id]
                await utils.answer(message, self.strings["cancelled"])