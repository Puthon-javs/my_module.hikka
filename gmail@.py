# meta developer: @Python_Javs

import random
import string
import aiohttp
import asyncio
from datetime import datetime, timedelta
from hikkatl.types import Message
from .. import loader, utils

@loader.tds
class AdvancedTempMailMod(loader.Module):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö email-–∞–¥—Ä–µ—Å–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∏—Å–µ–º"""
    strings = {
        "name": "AdvancedTempMail",
        "result": (
            "üìß <b>–í—Ä–µ–º–µ–Ω–Ω—ã–π email —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            "üë§ <b>–õ–æ–≥–∏–Ω:</b> <code>{email}</code>\n"
            "üîë <b>–ü–∞—Ä–æ–ª—å:</b> <code>{password}</code>\n"
            "‚è≥ <b>–ò—Å—Ç–µ–∫–∞–µ—Ç:</b> {expires}\n\n"
            "üîÑ <code>.checkmail</code> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏—Å—å–º–∞\n"
            "üóë <code>.delmail</code> - —É–¥–∞–ª–∏—Ç—å email\n"
            "‚ÑπÔ∏è <code>.mailinfo</code> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—á—Ç–µ"
        ),
        "no_email": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ email. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–∞–Ω–¥–æ–π <code>.tempmail</code>",
        "no_letters": "üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º",
        "letters": "üì¨ <b>–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞:</b>\n\n{letters}",
        "deleted": "üóë <b>Email —É–¥–∞–ª–µ–Ω:</b> <code>{email}</code>",
        "mail_info": (
            "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—á—Ç–µ:</b>\n\n"
            "üìß <b>–ê–¥—Ä–µ—Å:</b> <code>{email}</code>\n"
            "‚è≥ <b>–ò—Å—Ç–µ–∫–∞–µ—Ç:</b> {expires}\n"
            "üì® <b>–ü–∏—Å–µ–º –ø–æ–ª—É—á–µ–Ω–æ:</b> {letters_count}"
        ),
        "checking": "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞...",
        "letter_item": (
            "‚úâÔ∏è <b>–û—Ç:</b> {sender}\n"
            "üìå <b>–¢–µ–º–∞:</b> {subject}\n"
            "‚è∞ <b>–î–∞—Ç–∞:</b> {date}\n"
            "üîó <b>ID:</b> <code>{id}</code>\n"
        ),
    }

    async def client_ready(self, client, db):
        self._client = client
        self.db = db
        self.session = aiohttp.ClientSession()
        self.domains = [
            "temp-mail.org",
            "mailinator.com",
            "guerrillamail.com",
            "10minutemail.com"
        ]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ email –∏–∑ –±–∞–∑—ã
        if "tempmails" not in self.db:
            self.db["tempmails"] = {}

    async def on_unload(self):
        await self.session.close()

    @loader.command(ru_doc="–°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π email")
    async def tempmail(self, message: Message):
        """–°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π email —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ API"""
        # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await self._client.get_me()
        username = user.username or "user"
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥–æ–º–µ–Ω
        domain = random.choice(self.domains)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —á–∞—Å—Ç—å email
        random_part = "".join(random.choices(string.ascii_lowercase + string.digits, k=8))
        
        # –°–æ–∑–¥–∞–µ–º email
        email = f"{username.lower()}_{random_part}@{domain}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        password = "".join(random.choices(string.ascii_letters + string.digits + "!@#$%^&*", k=12))
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è (1 —á–∞—Å)
        expires = datetime.now() + timedelta(hours=1)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        self.db["tempmails"][str(message.chat_id)] = {
            "email": email,
            "password": password,
            "expires": expires.timestamp(),
            "domain": domain,
            "letters": [],
            "created": datetime.now().timestamp()
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await utils.answer(
            message,
            self.strings("result").format(
                email=email,
                password=password,
                expires=expires.strftime("%Y-%m-%d %H:%M:%S")
            )
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏—Å–µ–º
        asyncio.create_task(self._check_mail_loop(message.chat_id))

    async def _check_mail_loop(self, chat_id):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º"""
        while True:
            await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            
            mail_data = self.db["tempmails"].get(str(chat_id))
            if not mail_data:
                break
                
            if datetime.now().timestamp() > mail_data["expires"]:
                del self.db["tempmails"][str(chat_id)]
                break
                
            await self._fetch_letters(chat_id, mail_data)

    async def _fetch_letters(self, chat_id, mail_data):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Å–µ–º —á–µ—Ä–µ–∑ API"""
        try:
            if mail_data["domain"] == "temp-mail.org":
                async with self.session.get(
                    f"https://api.temp-mail.org/request/mail/id/{mail_data['email'].split('@')[0]}/format/json"
                ) as resp:
                    if resp.status == 200:
                        letters = await resp.json()
                        if letters and len(letters) > len(mail_data["letters"]):
                            new_letters = letters[len(mail_data["letters"]):]
                            mail_data["letters"] = letters
                            
                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤—ã—Ö –ø–∏—Å—å–º–∞—Ö
                            for letter in new_letters:
                                await self._client.send_message(
                                    chat_id,
                                    "üì© <b>–ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ!</b>\n\n" +
                                    self.strings("letter_item").format(
                                        sender=letter.get("from", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                                        subject=letter.get("subject", "–ë–µ–∑ —Ç–µ–º—ã"),
                                        date=letter.get("created_at", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                                        id=letter.get("id", "?"),
                                    )
                                )
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–æ–º–µ–Ω–æ–≤
                            
        except Exception as e:
            print(f"Error fetching mail: {e}")

    @loader.command(ru_doc="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏—Å—å–º–∞")
    async def checkmail(self, message: Message):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞"""
        mail_data = self.db["tempmails"].get(str(message.chat_id))
        if not mail_data:
            await utils.answer(message, self.strings("no_email"))
            return
            
        await utils.answer(message, self.strings("checking"))
        await self._fetch_letters(message.chat_id, mail_data)
        
        if not mail_data["letters"]:
            await utils.answer(message, self.strings("no_letters"))
            return
            
        letters_text = "\n".join(
            self.strings("letter_item").format(
                sender=letter.get("from", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                subject=letter.get("subject", "–ë–µ–∑ —Ç–µ–º—ã"),
                date=letter.get("created_at", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                id=letter.get("id", "?"),
            )
            for letter in mail_data["letters"]
        )
        
        await utils.answer(
            message,
            self.strings("letters").format(letters=letters_text)
        )

    @loader.command(ru_doc="–£–¥–∞–ª–∏—Ç—å email")
    async def delmail(self, message: Message):
        """–£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π email"""
        mail_data = self.db["tempmails"].get(str(message.chat_id))
        if not mail_data:
            await utils.answer(message, self.strings("no_email"))
            return
            
        email = mail_data["email"]
        del self.db["tempmails"][str(message.chat_id)]
        
        await utils.answer(
            message,
            self.strings("deleted").format(email=email)
        )

    @loader.command(ru_doc="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—á—Ç–µ")
    async def mailinfo(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º email"""
        mail_data = self.db["tempmails"].get(str(message.chat_id))
        if not mail_data:
            await utils.answer(message, self.strings("no_email"))
            return
            
        expires = datetime.fromtimestamp(mail_data["expires"])
        
        await utils.answer(
            message,
            self.strings("mail_info").format(
                email=mail_data["email"],
                expires=expires.strftime("%Y-%m-%d %H:%M:%S"),
                letters_count=len(mail_data["letters"])
            )
        )