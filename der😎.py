from hikkatl.types import Message
from .. import loader, utils
from datetime import datetime
import re

@loader.tds
class ChatToolsMod(loader.Module):
    """–ú–æ—â–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏"""
    strings = {
        "name": "ChatTools",
        "welcome_enabled": "‚úÖ <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤–∫–ª—é—á–µ–Ω—ã!</b>",
        "welcome_disabled": "‚ùå <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã!</b>",
        "welcome_text": "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user}!</b>\n\n–ü—Ä–∞–≤–∏–ª–∞: /rules",
        "rules_set": "üìú <b>–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!</b>",
        "chat_cleared": "üßπ <b>–ß–∞—Ç –æ—á–∏—â–µ–Ω!</b> (–£–¥–∞–ª–µ–Ω–æ: {count} —Å–æ–æ–±—â–µ–Ω–∏–π)",
        "no_admin": "‚ö†Ô∏è <b>–ù—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞!</b>",
        "stats_header": "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:</b>\n\n{stats}",
        "link_deleted": "üîó <b>–£–¥–∞–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –æ—Ç:</b> @{username}",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "welcome_enabled",
                True,
                lambda: "–í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "welcome_text",
                self.strings["welcome_text"],
                lambda: "–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è",
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "rules_text",
                "üìå –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:\n1. –ë–µ–∑ —Å–ø–∞–º–∞\n2. –ë–µ–∑ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π",
                lambda: "–¢–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª",
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "ban_links",
                True,
                lambda: "–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏",
                validator=loader.validators.Boolean()
            ),
        )
        self.user_stats = {}

    async def client_ready(self, client, db):
        self.client = client

    async def watcher(self, message: Message):
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
        if self.config["ban_links"] and "http" in (message.raw_text or ""):
            if await self.check_admin(utils.get_chat_id(message)):
                await message.delete()
                await self.log_action(
                    self.strings["link_deleted"].format(
                        username=message.sender.username or message.sender_id
                    )
                )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        user_id = message.sender_id
        self.user_stats[user_id] = self.user_stats.get(user_id, 0) + 1

    @loader.command(alias="welcome")
    async def welcometogglecmd(self, message: Message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        self.config["welcome_enabled"] = not self.config["welcome_enabled"]
        status = self.strings["welcome_enabled"] if self.config["welcome_enabled"] else self.strings["welcome_disabled"]
        await utils.answer(message, status)

    @loader.command(alias="setrules")
    async def setrulescmd(self, message: Message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞"""
        args = utils.get_args_raw(message)
        if args:
            self.config["rules_text"] = args
        await utils.answer(message, self.strings["rules_set"])

    @loader.command(alias="clear")
    async def clearchatcmd(self, message: Message):
        """–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        if not await self.check_admin(utils.get_chat_id(message)):
            await utils.answer(message, self.strings["no_admin"])
            return

        chat = await message.get_chat()
        count = 0
        async for msg in self.client.iter_messages(chat):
            if count >= 100:  # –õ–∏–º–∏—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                break
            await msg.delete()
            count += 1
            await asyncio.sleep(0.5)  # –ê–Ω—Ç–∏-—Ñ–ª—É–¥

        await utils.answer(
            message,
            self.strings["chat_cleared"].format(count=count)
        )

    @loader.command(alias="stats")
    async def chatstatscmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞"""
        if not self.user_stats:
            await utils.answer(message, "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞!</b>")
            return

        sorted_stats = sorted(
            self.user_stats.items(),
            key=lambda x: x[1],
            reverse=True
        )[:10]  # –¢–æ–ø-10

        stats_text = "\n".join(
            f"‚ñ™ <b>{i+1}.</b> ID{user_id}: {count} —Å–æ–æ–±—â."
            for i, (user_id, count) in enumerate(sorted_stats)
        )

        await utils.answer(
            message,
            self.strings["stats_header"].format(stats=stats_text)
        )

    async def check_admin(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞"""
        try:
            chat = await self.client.get_entity(chat_id)
            return chat.admin_rights is not None
        except:
            return False

    async def log_action(self, text: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π"""
        print(f"[ChatTools] {text}")  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –ª–æ–≥-—á–∞—Ç