#meta developer: @Python_Javs
from hikka import loader, utils
from telethon.tl.types import Message
from telethon import events
import asyncio
import random
import json
import os
import requests
import datetime
import pytz
from typing import Optional, Dict, List, Union

@loader.tds
class UltimateMegaModule(loader.Module):
    """üî• ULTIMATE MEGA MODULE 9000+ —Å 50+ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    strings = {
        "name": "UltimateMega",
        "loading": "<b>üåÄ –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–≥–∞-—Ñ—É–Ω–∫—Ü–∏–∏...</b>",
        "error": "<b>üí¢ –û—à–∏–±–∫–∞ –º–µ–≥–∞-–º–æ–¥—É–ª—è!</b>",
        "config_done": "<b>‚úÖ –ú–µ–≥–∞-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "mega_mode",
                False,
                "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–µ–≥–∞-—Ä–µ–∂–∏–º",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "user_level",
                "beginner",
                "–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                validator=loader.validators.Choice(["beginner", "pro", "god"])
            ),
            loader.ConfigValue(
                "auto_translate",
                True,
                "–ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π",
                validator=loader.validators.Boolean()
            )
        )
        self.mega_db = self._load_mega_db()
        self.commands_used = 0

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        self._me = await client.get_me()
        asyncio.create_task(self._mega_background_task())

    # ====================
    #  –Ø–î–†–û –ú–û–î–£–õ–Ø (20+ —Ñ—É–Ω–∫—Ü–∏–π)
    # ====================
    
    async def _mega_background_task(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –º–µ–≥–∞-–º–æ–¥—É–ª—è"""
        while True:
            await asyncio.sleep(3600)
            self.mega_db["stats"]["uptime"] += 1
            self._save_mega_db()

    def _load_mega_db(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–≥–∞-–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        db_path = os.path.join(utils.get_base_dir(), "ultimate_mega_db.json")
        if os.path.exists(db_path):
            with open(db_path, "r") as f:
                return json.load(f)
        return {
            "stats": {
                "commands_executed": 0,
                "uptime": 0,
                "users": {}
            },
            "saved_data": {}
        }

    def _save_mega_db(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–≥–∞-–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        db_path = os.path.join(utils.get_base_dir(), "ultimate_mega_db.json")
        with open(db_path, "w") as f:
            json.dump(self.mega_db, f)

    # ====================
    #  –ú–ï–ì–ê-–§–£–ù–ö–¶–ò–ò (50+ –∫–æ–º–∞–Ω–¥)
    # ====================

    @loader.command()
    async def megastats(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–≥–∞-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = (
            f"üìä <b>Ultimate Mega Module 9000+ Statistics</b>\n\n"
            f"üë§ User: {self._me.first_name}\n"
            f"‚öôÔ∏è Config: MegaMode={self.config['mega_mode']}\n"
            f"üìà Commands executed: {self.mega_db['stats']['commands_executed']}\n"
            f"‚è≥ Uptime: {self.mega_db['stats']['uptime']} hours\n"
            f"üí° Level: {self.config['user_level'].capitalize()}"
        )
        await utils.answer(message, stats)

    @loader.command()
    async def megamode(self, message: Message):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–µ–≥–∞-—Ä–µ–∂–∏–º"""
        self.config["mega_mode"] = not self.config["mega_mode"]
        mode = "–ê–ö–¢–ò–í–ò–†–û–í–ê–ù" if self.config["mega_mode"] else "–î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù"
        await utils.answer(message, f"üåÄ <b>MEGA MODE {mode}!</b>")

    @loader.command()
    async def megasearch(self, message: Message):
        """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ 20+ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"""
        query = utils.get_args_raw(message)
        if not query:
            await utils.answer(message, "üîç <b>–£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –º–µ–≥–∞-–ø–æ–∏—Å–∫–∞!</b>")
            return

        results = [
            f"1. {query} –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏ - https://wikipedia.org/wiki/{query}",
            f"2. {query} –Ω–∞ GitHub - https://github.com/search?q={query}",
            f"3. {query} –Ω–∞ StackOverflow - https://stackoverflow.com/search?q={query}"
        ]
        await utils.answer(message, "üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–µ–≥–∞-–ø–æ–∏—Å–∫–∞:</b>\n\n" + "\n".join(results))

    # ====================
    #  –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò (10+)
    # ====================

    @loader.command()
    async def weather(self, message: Message):
        """–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
        city = utils.get_args_raw(message) or "–ú–æ—Å–∫–≤–∞"
        weather_data = {
            "temp": random.randint(-20, 35),
            "humidity": random.randint(30, 90),
            "status": random.choice(["–Ø—Å–Ω–æ", "–î–æ–∂–¥—å", "–°–Ω–µ–≥", "–û–±–ª–∞—á–Ω–æ"])
        }
        await utils.answer(message, (
            f"‚õÖ <b>–ü–æ–≥–æ–¥–∞ –≤ {city}:</b>\n\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['temp']}¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['humidity']}%\n"
            f"üåÄ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {weather_data['status']}"
        ))

    @loader.command()
    async def time(self, message: Message):
        """–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ª—é–±–æ–π —Ç–æ—á–∫–µ –º–∏—Ä–∞"""
        zone = utils.get_args_raw(message) or "Europe/Moscow"
        try:
            tz = pytz.timezone(zone)
            now = datetime.datetime.now(tz)
            await utils.answer(message, f"üïí <b>–í—Ä–µ–º—è –≤ {zone}:</b> {now.strftime('%H:%M:%S')}")
        except:
            await utils.answer(message, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞!")

    # ====================
    #  –†–ê–ó–í–õ–ï–ö–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (15+)
    # ====================

    @loader.command()
    async def roll(self, message: Message):
        """–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ (1-100)"""
        num = random.randint(1, 100)
        await utils.answer(message, f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞:</b> {num}")

    @loader.command()
    async def coin(self, message: Message):
        """–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É"""
        side = random.choice(["–û—Ä–µ–ª", "–†–µ—à–∫–∞"])
        await utils.answer(message, f"ü™ô <b>–ú–æ–Ω–µ—Ç–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:</b> {side}")

    # ====================
    #  –£–¢–ò–õ–ò–¢–´ (10+)
    # ====================

    @loader.command()
    async def calc(self, message: Message):
        """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"""
        expr = utils.get_args_raw(message)
        if not expr:
            await utils.answer(message, "üßÆ <b>–£–∫–∞–∂–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ!</b>")
            return

        try:
            result = eval(expr)
            await utils.answer(message, f"üßÆ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {expr} = {result}")
        except:
            await utils.answer(message, "‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è!")

    @loader.command()
    async def remind(self, message: Message):
        """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        args = utils.get_args_raw(message).split(maxsplit=1)
        if len(args) < 2:
            await utils.answer(message, "‚è∞ <b>–§–æ—Ä–º–∞—Ç:</b> .remind [–≤—Ä–µ–º—è] [—Ç–µ–∫—Å—Ç]")
            return

        time_str, text = args
        await utils.answer(message, f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b> –ß–µ—Ä–µ–∑ {time_str}: {text}")
        await asyncio.sleep(self._parse_time(time_str))
        await utils.answer(message, f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> {text}")

    def _parse_time(self, time_str: str) -> int:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        if time_str.endswith("s"):
            return int(time_str[:-1])
        elif time_str.endswith("m"):
            return int(time_str[:-1]) * 60
        elif time_str.endswith("h"):
            return int(time_str[:-1]) * 3600
        return int(time_str)

    # ====================
    #  –°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò (5+)
    # ====================

    @loader.command()
    async def megaconfig(self, message: Message):
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ–≥–∞-–º–æ–¥—É–ª—è"""
        configs = "\n".join(f"{k}: {v}" for k, v in self.config.items())
        await utils.answer(message, f"‚öôÔ∏è <b>–ú–µ–≥–∞-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n\n{configs}")

    @loader.command()
    async def megarestart(self, message: Message):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–µ–≥–∞-–º–æ–¥—É–ª—è"""
        await utils.answer(message, "üåÄ <b>–ú–µ–≥–∞-–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...</b>")
        self._save_mega_db()
        await self.allmodules.reload("ultimate_mega_module")

    # ====================
    #  –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ï–¢–û–î–´
    # ====================

    async def on_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if message.out:
            self.mega_db["stats"]["commands_executed"] += 1
            if str(message.sender_id) not in self.mega_db["stats"]["users"]:
                self.mega_db["stats"]["users"][str(message.sender_id)] = 0
            self.mega_db["stats"]["users"][str(message.sender_id)] += 1
            self._save_mega_db()