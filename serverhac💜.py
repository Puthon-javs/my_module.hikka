# meta developer: @Python_Javs
# meta banner: https://example.com/banner.jpg

import random
import time
from .. import loader, utils
from telethon.tl.types import Message

@loader.tds
class HackerAnimationMod(loader.Module):
    """–ê–Ω–∏–º–∞—Ü–∏—è –≤–∑–ª–æ–º–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø–æ–¥–±–æ—Ä–æ–º –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è"""

    strings = {
        "name": "HackAnim",
        "hacking": "üöÄ <b>–ù–∞—á–∏–Ω–∞—é –≤–∑–ª–æ–º —Å–µ—Ä–≤–µ—Ä–∞...</b>",
        "success": "‚úÖ <b>–í–∑–ª–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n<b>–õ–æ–≥–∏–Ω:</b> <code>{login}</code>\n<b>–ü–∞—Ä–æ–ª—å:</b> <code>{password}</code>",
        "args": "‚ùå <b>–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –≤–∑–ª–æ–º–∞!</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "animation_delay",
                0.1,
                "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏ –∞–Ω–∏–º–∞—Ü–∏–∏",
                validator=loader.validators.Float(minimum=0.05, maximum=0.5)
            ),
        )

    async def client_ready(self, client, db):
        self._client = client

    @loader.unrestricted
    async def hackcmd(self, message: Message):
        """–í–∑–ª–æ–º–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .hack <—Ü–µ–ª—å>"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings("args"))
            return

        await utils.answer(message, self.strings("hacking"))

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
        login = self._generate_credential()
        password = self._generate_credential(12)

        # –ê–Ω–∏–º–∞—Ü–∏—è –≤–∑–ª–æ–º–∞
        animation = [
            "üîç –ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...",
            "üõ°Ô∏è –û–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã...",
            "üíª –í–Ω–µ–¥—Ä–µ–Ω–∏–µ —ç–∫—Å–ø–ª–æ–π—Ç–∞...",
            "üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...",
            "üîë –ü–æ–¥–±–æ—Ä –ª–æ–≥–∏–Ω–∞...",
            "üîì –ü–æ–¥–±–æ—Ä –ø–∞—Ä–æ–ª—è...",
            "üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...",
            "üîÑ –î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞...",
            "‚ö° –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞..."
        ]

        for step in animation:
            await utils.answer(message, f"üöÄ <b>–í–∑–ª–æ–º {args}...</b>\n\n{step}")
            time.sleep(self.config["animation_delay"] * 2)

            # –≠—Ñ—Ñ–µ–∫—Ç "–ø–æ–¥–±–æ—Ä–∞" –ø–∞—Ä–æ–ª—è
            for _ in range(3):
                fake_pass = self._generate_fake_password(len(password))
                msg = f"üöÄ <b>–í–∑–ª–æ–º {args}...</b>\n\n{step}\n\nüîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: <code>{login}</code>\nüîì –ü–∞—Ä–æ–ª—å: <code>{fake_pass}</code>"
                await utils.answer(message, msg)
                time.sleep(self.config["animation_delay"])

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "–Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏" –¥–∞–Ω–Ω—ã–º–∏
        await utils.answer(message, self.strings("success").format(login=login, password=password))

    def _generate_credential(self, length=8):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—è"""
        chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_"
        return ''.join(random.choice(chars) for _ in range(length))

    def _generate_fake_password(self, length):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏"""
        chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()"
        return ''.join(random.choice(chars) for _ in range(length))