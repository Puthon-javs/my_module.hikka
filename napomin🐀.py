from hikkatl.types import Message
from .. import loader, utils
from datetime import datetime, timedelta
import re
import asyncio

@loader.tds
class QuickReminderMod(loader.Module):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    strings = {
        "name": "QuickReminder",
        "reminder_set": "‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>\n<b>–¢–µ–∫—Å—Ç:</b> <i>{}</i>\n<b>–ö–æ–≥–¥–∞:</b> <code>{}</code>",
        "invalid_time": "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!</b>\n–ü—Ä–∏–º–µ—Ä—ã: <code>—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç</code>, <code>–∑–∞–≤—Ç—Ä–∞ –≤ 15:00</code>",
        "no_text": "‚ùå <b>–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!</b>",
        "reminder_list": "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n\n{}",
        "no_reminders": "üì≠ <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.</b>",
        "reminder_deleted": "üóë <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!</b> (ID: <code>{}</code>)",
        "not_found": "üîç <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b>",
        "reminder_notify": "üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!</b>\n\n<i>{}</i>",
    }

    def __init__(self):
        self.reminders = {}
        self.reminder_id = 0

    async def _parse_time(self, time_str: str) -> datetime | None:
        time_str = time_str.lower()
        now = datetime.now()

        # "–ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç"
        if "—á–µ—Ä–µ–∑" in time_str:
            nums = re.findall(r"\d+", time_str)
            if not nums:
                return None
            mins = int(nums[0])
            return now + timedelta(minutes=mins)

        # "–ó–∞–≤—Ç—Ä–∞ –≤ 15:00"
        if "–∑–∞–≤—Ç—Ä–∞" in time_str:
            time_part = re.search(r"–≤ (\d{1,2}):?(\d{2})?", time_str)
            if not time_part:
                return now + timedelta(days=1)
            hour = int(time_part.group(1))
            minute = int(time_part.group(2)) if time_part.group(2) else 0
            return (now + timedelta(days=1)).replace(hour=hour, minute=minute, second=0)

        # "31.12 –≤ 23:59"
        date_match = re.search(r"(\d{1,2})\.(\d{1,2})(?: –≤ (\d{1,2}):?(\d{2})?)?", time_str)
        if date_match:
            day = int(date_match.group(1))
            month = int(date_match.group(2))
            hour = int(date_match.group(3)) if date_match.group(3) else 12
            minute = int(date_match.group(4)) if date_match.group(4) else 0
            year = now.year if (month >= now.month and day >= now.day) else now.year + 1
            try:
                return datetime(year, month, day, hour, minute)
            except ValueError:
                return None

        return None

    async def _check_reminders(self):
        while True:
            now = datetime.now()
            to_delete = []
            for id_, (text, time) in self.reminders.items():
                if now >= time:
                    await self._notify_reminder(text)
                    to_delete.append(id_)
            for id_ in to_delete:
                del self.reminders[id_]
            await asyncio.sleep(10)

    async def _notify_reminder(self, text: str):
        await self.client.send_message(
            "me",
            self.strings["reminder_notify"].format(text),
        )

    async def client_ready(self, client, db):
        self.client = client
        asyncio.create_task(self._check_reminders())

    @loader.command(alias="remind")
    async def reminderaddcmd(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: .remind —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –∫—É–ø–∏—Ç—å —Ö–ª–µ–±"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["no_text"])
            return

        time_part = args.split(maxsplit=3)
        if len(time_part) < 3:
            await utils.answer(message, self.strings["invalid_time"])
            return

        time_str = " ".join(time_part[:3])
        text = " ".join(time_part[3:])
        remind_time = await self._parse_time(time_str)

        if not remind_time:
            await utils.answer(message, self.strings["invalid_time"])
            return

        self.reminder_id += 1
        self.reminders[self.reminder_id] = (text, remind_time)

        await utils.answer(
            message,
            self.strings["reminder_set"].format(text, remind_time.strftime("%d.%m.%Y %H:%M")),
        )

    @loader.command(alias="rlist")
    async def reminderlistcmd(self, message: Message):
        """–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        if not self.reminders:
            await utils.answer(message, self.strings["no_reminders"])
            return

        reminders_list = "\n".join(
            f"‚ñ™ <b>#{id}</b> ‚Üí <i>{text}</i> (<code>{time.strftime('%d.%m.%Y %H:%M')}</code>)"
            for id, (text, time) in self.reminders.items()
        )

        await utils.answer(
            message,
            self.strings["reminder_list"].format(reminders_list),
        )

    @loader.command(alias="rdel")
    async def reminderdelcmd(self, message: Message):
        """–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: .rdel 1"""
        args = utils.get_args_raw(message)
        if not args or not args.isdigit() or int(args) not in self.reminders:
            await utils.answer(message, self.strings["not_found"])
            return

        del self.reminders[int(args)]
        await utils.answer(
            message,
            self.strings["reminder_deleted"].format(args),
        )